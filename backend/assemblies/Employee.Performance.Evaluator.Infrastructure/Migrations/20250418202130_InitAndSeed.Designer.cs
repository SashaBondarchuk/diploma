// <auto-generated />
using System;
using Employee.Performance.Evaluator.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Employee.Performance.Evaluator.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250418202130_InitAndSeed")]
    partial class InitAndSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTimeOffset>("BirthDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("HireDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avatar = new byte[] { 30, 69, 178, 197, 136, 153, 196, 106, 207, 179, 238, 73, 149, 38, 145, 104, 137, 51, 228, 248, 109, 154, 185, 93, 97, 18, 27, 123, 80, 115, 79, 226, 34, 144, 151, 248, 28, 193, 80, 111, 173, 131, 166, 32, 108, 158, 172, 205, 91, 32, 23, 226, 159, 255, 22, 132, 139, 84, 100, 117, 125, 72, 26, 92, 99, 12, 38, 4, 142, 153, 75, 199, 227, 117, 75, 234, 243, 153, 241, 194, 102, 77, 32, 48, 92, 109, 67, 34, 122, 19, 108, 200, 92, 219, 241, 100, 105, 73, 188, 95, 119, 167, 63, 194, 212, 79, 254, 41, 180, 44, 144, 242, 98, 162, 15, 47, 40, 234, 0, 246, 201, 3, 138, 123, 44, 131, 107, 8, 132, 231, 128, 170, 220, 145, 74, 190, 14, 94, 91, 12, 110, 25, 110, 77, 130, 121, 101, 186, 203, 193, 59, 126, 73, 198, 150, 116, 28, 195, 149, 80, 228, 246, 164, 205, 171, 230, 21, 208, 87, 80, 33, 201, 142, 243, 135, 175, 149, 61, 248, 179, 30, 176, 60, 195, 171, 1, 96, 21, 251, 214, 161, 75, 201, 11, 40, 120, 116, 161, 161, 156, 99, 148, 98, 123, 160, 113, 240, 85, 63, 230, 222, 223, 202, 225, 50, 51, 185, 225, 33, 169, 133, 255, 213, 129, 175, 213, 0, 131, 203, 14, 58, 244, 155, 92, 79, 138, 77, 193, 35, 57, 17, 11, 214, 20, 248, 193, 128, 231, 217, 245, 191, 147, 127, 247, 22, 99, 190, 225, 203, 202, 113, 109, 138, 48, 172, 233, 67, 110, 146, 168, 229, 247, 190, 232, 152, 121, 41, 193, 137, 238, 85, 25, 169, 214, 79, 167, 117, 163, 69, 235, 203, 108, 246, 88, 200, 163, 129, 165, 104, 14, 125, 17, 84, 49, 15, 199, 212, 151, 95, 156, 58, 253, 88, 221, 117, 87, 195, 179, 225, 4, 116, 159, 41, 167, 220, 121, 1, 101, 31, 244, 248, 131, 88, 122, 112, 67, 196, 120, 198, 135, 210, 222, 68, 168, 176, 205, 19, 25, 227, 112, 223, 205, 196, 99, 153, 221, 231, 173, 84, 150, 198, 110, 119, 106, 164, 183, 165, 221, 108, 49, 147, 75, 237, 89, 49, 150, 91, 129, 246, 15, 101, 232, 130, 174, 20, 43, 191, 244, 225, 146, 91, 23, 36, 48, 193, 99, 102, 218, 3, 249, 40, 54, 172, 177, 221, 148, 224, 106, 49, 3, 130, 102, 183, 69, 48, 222, 236, 200, 85, 121, 248, 176, 252, 218, 213, 124, 38, 188, 152, 206, 47, 129, 125, 252, 230, 47, 59, 209, 209, 128, 74, 84, 194, 221, 15, 245, 95, 222, 0, 227, 119, 158, 132, 138, 1, 119, 57, 209, 220, 97, 109, 36, 209, 99, 212, 1, 233, 186, 94, 1, 162, 26, 246, 213, 46, 163, 237, 30, 202, 224, 28, 71, 188, 181, 86, 144, 252, 242, 250, 111, 245, 106, 245, 112, 18, 38, 130, 94, 9, 14, 11, 165, 128, 255, 64, 92, 167, 175, 91, 94, 137, 27, 6, 251, 68, 38, 103, 28, 13, 67, 4, 246, 191, 239, 12, 56, 37, 134, 195, 8, 33, 143, 21, 188, 212, 118, 199, 189, 116, 249, 233, 77, 150, 156, 229, 217, 99, 249, 43, 236, 190, 102, 81, 198, 9, 20, 229, 145, 242, 8, 54, 33, 235, 83, 60, 250, 6, 74, 38, 205, 94, 170, 167, 19, 90, 182, 95, 34, 9, 50, 213, 44, 90, 215, 73, 187, 61, 78, 178, 191, 145, 54, 202, 108, 194, 199, 97, 67, 95, 235, 211, 24, 211, 93, 141, 19, 190, 61, 108, 83, 181, 194, 135, 192, 51, 10, 198, 20, 10, 129, 188, 183, 151, 102, 60, 40, 224, 59, 80, 146, 84, 28, 194, 30, 94, 188, 89, 252, 73, 53, 252, 255, 226, 95, 10, 206, 175, 9, 57, 183, 0, 77, 56, 222, 46, 28, 129, 108, 33, 101, 51, 131, 236, 217, 254, 152, 0, 104, 98, 119, 177, 202, 203, 212, 132, 188, 212, 56, 91, 110, 120, 215, 2, 152, 145, 7, 228, 228, 240, 65, 58, 236, 219, 228, 2, 121, 18, 9, 97, 114, 206, 70, 166, 193, 6, 54, 129, 99, 89, 113, 72, 73, 16, 178, 236, 91, 129, 84, 72, 246, 179, 27, 119, 33, 60, 197, 238, 231, 210, 11, 170, 203, 214, 233, 160, 50, 49, 64, 146, 90, 133, 128, 139, 127, 248, 241, 220, 41, 247, 166, 248, 190, 192, 106, 190, 178, 206, 133, 133, 64, 72, 154, 145, 77, 199, 125, 114, 39, 18, 186, 42, 64, 193, 237, 112, 51, 144, 248, 40, 75, 233, 197, 239, 43, 18, 235, 10, 108, 42, 237, 99, 171, 186, 81, 18, 235, 239, 61, 183, 123, 126, 180, 22, 61, 124, 183, 253, 210, 249, 139, 34, 214, 92, 58, 87, 131, 171, 101, 59, 220, 115, 6, 253, 36, 87, 126, 134, 111, 219, 133, 67, 83, 64, 172, 204, 52, 174, 178, 175, 91, 237, 55, 114, 158, 202, 141, 79, 128, 250, 143, 63, 138, 2, 219, 8, 120, 183, 241, 230, 254, 49, 142, 247, 116, 72, 207, 149, 176, 109, 35, 212, 249, 182, 223, 238, 59, 147, 94, 90, 202, 47, 6, 116, 76, 69, 185, 80, 100, 164, 83, 125, 188, 203, 177, 42, 95, 64, 254, 86, 251, 247, 159, 18, 215, 186, 70, 211, 34, 237, 204, 229, 89, 151, 28, 206, 43, 25, 170, 47, 142, 126, 48, 11, 26, 166, 23, 45, 5, 181, 143, 251, 149, 7, 94, 210, 144, 243, 157, 145, 254, 229, 46, 119, 216, 110, 35, 36, 175, 226, 255, 69, 149, 206, 199, 124, 199, 147, 248, 49, 162, 25, 206, 108, 93, 208, 79, 81, 57, 73, 62, 55, 123, 24, 48, 168, 80, 184, 51, 171, 130, 243, 125, 34, 182, 73, 102, 198, 64, 226, 11, 252, 251, 108, 239, 229, 23, 193, 26, 7, 30 },
                            BirthDate = new DateTimeOffset(new DateTime(2005, 6, 22, 0, 2, 58, 633, DateTimeKind.Unspecified).AddTicks(1992), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Zena",
                            HireDate = new DateTimeOffset(new DateTime(2022, 12, 21, 9, 14, 22, 767, DateTimeKind.Unspecified).AddTicks(8925), new TimeSpan(0, 2, 0, 0, 0)),
                            LastName = "Dicki",
                            PhoneNumber = "1-867-347-8513",
                            TeamId = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Avatar = new byte[] { 106, 137, 17, 86, 62, 65, 59, 15, 41, 75, 145, 142, 158, 43, 141, 175, 7, 23, 126, 238, 127, 234, 40, 32, 181, 253, 156, 175, 189, 63, 73, 107, 11, 6, 157, 149, 193, 148, 39, 99, 140, 186, 82, 83, 141, 158, 111, 52, 191, 255, 168, 132, 45, 199, 148, 127, 97, 240, 161, 64, 164, 139, 81, 233, 1, 37, 130, 152, 142, 247, 238, 114, 239, 27, 98, 196, 151, 212, 147, 23, 141, 103, 240, 190, 151, 197, 62, 68, 113, 29, 52, 208, 243, 230, 190, 0, 105, 104, 81, 104, 28, 214, 166, 199, 16, 53, 148, 18, 100, 207, 232, 140, 93, 137, 179, 61, 155, 146, 82, 60, 230, 61, 38, 112, 195, 29, 126, 9, 92, 98, 91, 46, 131, 42, 251, 182, 193, 41, 174, 98, 49, 44, 224, 162, 53, 167, 115, 105, 51, 129, 101, 214, 22, 20, 129, 222, 175, 54, 3, 242, 182, 139, 181, 2, 115, 185, 8, 50, 142, 252, 124, 113, 228, 240, 11, 186, 93, 132, 59, 28, 170, 21, 213, 219, 252, 133, 23, 110, 169, 28, 7, 139, 37, 187, 171, 166, 118, 221, 46, 123, 158, 65, 218, 55, 5, 243, 241, 38, 9, 199, 129, 43, 250, 231, 72, 161, 181, 218, 5, 238, 161, 153, 137, 114, 245, 241, 76, 40, 68, 101, 67, 127, 85, 192, 125, 105, 58, 158, 213, 9, 147, 241, 101, 225, 155, 219, 144, 62, 115, 10, 240, 156, 216, 63, 217, 5, 184, 104, 65, 20, 166, 200, 226, 164, 132, 1, 213, 58, 106, 222, 103, 23, 4, 251, 91, 176, 52, 167, 214, 25, 96, 13, 181, 58, 116, 166, 167, 22, 230, 120, 177, 209, 92, 193, 98, 202, 15, 192, 93, 154, 6, 85, 211, 148, 162, 216, 152, 220, 228, 40, 208, 16, 145, 40, 179, 152, 19, 167, 47, 221, 89, 191, 83, 242, 45, 149, 187, 66, 152, 145, 161, 116, 73, 60, 19, 11, 58, 32, 151, 156, 14, 203, 49, 190, 167, 160, 63, 51, 14, 201, 182, 103, 145, 128, 64, 70, 1, 225, 102, 13, 29, 85, 67, 82, 134, 92, 199, 85, 20, 168, 94, 242, 15, 146, 207, 142, 141, 149, 74, 141, 85, 135, 52, 207, 218, 57, 226, 201, 252, 204, 9, 88, 186, 138, 127, 184, 135, 222, 55, 75, 217, 234, 31, 101, 107, 196, 87, 254, 177, 178, 185, 108, 150, 217, 183, 149, 33, 116, 120, 77, 121, 253, 89, 72, 159, 5, 56, 133, 19, 22, 6, 174, 94, 255, 180, 106, 104, 206, 100, 21, 226, 228, 23, 73, 19, 157, 194, 224, 210, 233, 150, 19, 102, 234, 209, 219, 145, 215, 198, 101, 139, 210, 234, 154, 172, 10, 13, 151, 36, 76, 44, 82, 16, 98, 106, 149, 230, 15, 52, 2, 67, 87, 179, 41, 127, 242, 72, 116, 45, 216, 217, 145, 8, 254, 138, 15, 249, 125, 157, 9, 143, 42, 187, 133, 188, 68, 3, 3, 127, 60, 245, 130, 162, 196, 33, 52, 30, 193, 26, 185, 194, 153, 106, 76, 115, 155, 74, 17, 216, 91, 155, 105, 113, 43, 115, 24, 155, 45, 108, 59, 239, 69, 244, 240, 227, 86, 238, 68, 221, 85, 241, 56, 98, 228, 71, 245, 192, 111, 17, 33, 250, 241, 42, 36, 161, 140, 17, 119, 81, 8, 152, 240, 84, 223, 202, 124, 165, 121, 104, 28, 172, 5, 52, 130, 106, 98, 6, 141, 228, 125, 88, 44, 27, 75, 65, 253, 26, 208, 79, 87, 69, 119, 243, 212, 189, 0, 228, 130, 25, 202, 80, 70, 7, 245, 117, 244, 189, 167, 186, 62, 133, 132, 147, 211, 176, 108, 213, 9, 158, 205, 98, 212, 42, 16, 214, 52, 18, 95, 197, 106, 126, 132, 115, 25, 45, 17, 36, 38, 214, 76, 63, 114, 22, 17, 210, 193, 228, 32, 36, 81, 43, 219, 228, 76, 103, 123, 28, 247, 30, 64, 226, 94, 226, 80, 191, 1, 16, 121, 165, 158, 71, 174, 50, 81, 142, 240, 190, 24, 61, 21, 80, 242, 59, 116, 63, 163, 159, 38, 178, 178, 244, 45, 8, 149, 106, 225, 143, 198, 81, 209, 176, 107, 122, 134, 9, 124, 168, 147, 190, 119, 188, 4, 185, 9, 240, 239, 34, 110, 17, 28, 97, 233, 198, 242, 169, 26, 166, 157, 230, 172, 96, 248, 198, 108, 100, 228, 119, 181, 106, 194, 250, 12, 104, 58, 245, 240, 115, 254, 165, 122, 190, 33, 181, 53, 111, 199, 164, 135, 220, 238, 214, 11, 172, 17, 23, 196, 61, 76, 165, 11, 120, 109, 3, 78, 33, 84, 129, 139, 253, 184, 167, 167, 248, 107, 238, 62, 67, 145, 252, 157, 63, 239, 216, 124, 236, 239, 96, 87, 35, 49, 179, 39, 89, 153, 2, 80, 29, 102, 20, 26, 70, 24, 138, 35, 71, 46, 19, 64, 34, 216, 129, 172, 79, 7, 204, 137, 149, 135, 98, 49, 244, 41, 104, 203, 5, 127, 77, 94, 105, 158, 32, 220, 124, 225, 87, 38, 100, 181, 53, 189, 220, 31, 52, 74, 175, 7, 215, 81, 205, 121, 187, 150, 4, 227, 38, 28, 176, 191, 29, 199, 224, 180, 215, 132, 184, 164, 47, 110, 176, 165, 36, 223, 82, 165, 84, 213, 244, 29, 28, 254, 168, 252, 145, 240, 227, 138, 216, 153, 187, 58, 118, 165, 151, 109, 220, 40, 72, 176, 146, 10, 215, 105, 161, 40, 84, 219, 68, 94, 142, 81, 39, 146, 163, 31, 30, 228, 35, 231, 161, 46, 204, 149, 178, 117, 46, 127, 72, 228, 200, 44, 140, 68, 139, 17, 38, 63, 91, 104, 155, 7, 69, 121, 11, 106, 19, 227, 2, 119, 79, 248, 4, 97, 14, 100, 62, 65, 182, 43, 249, 213, 146, 96, 150, 98, 196, 226, 7, 145, 248, 222, 137, 186, 76, 153, 232, 82, 138, 71, 98, 75 },
                            BirthDate = new DateTimeOffset(new DateTime(2005, 10, 21, 16, 15, 36, 832, DateTimeKind.Unspecified).AddTicks(4901), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Name",
                            HireDate = new DateTimeOffset(new DateTime(2022, 2, 21, 13, 33, 43, 139, DateTimeKind.Unspecified).AddTicks(5462), new TimeSpan(0, 2, 0, 0, 0)),
                            LastName = "Adams",
                            PhoneNumber = "(834) 905-2318 x475",
                            TeamId = 10,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Avatar = new byte[] { 227, 168, 165, 48, 219, 112, 126, 112, 110, 74, 21, 116, 124, 235, 183, 110, 200, 173, 89, 194, 203, 198, 58, 153, 172, 224, 190, 20, 85, 89, 74, 134, 37, 3, 111, 225, 161, 50, 111, 12, 81, 36, 97, 221, 21, 193, 170, 231, 45, 26, 103, 193, 107, 178, 26, 28, 109, 12, 131, 250, 177, 106, 26, 21, 255, 142, 79, 120, 123, 213, 205, 150, 62, 77, 112, 166, 100, 93, 131, 235, 54, 215, 230, 59, 241, 136, 27, 114, 233, 82, 115, 149, 174, 116, 90, 231, 9, 75, 221, 135, 113, 49, 108, 88, 77, 209, 131, 30, 66, 115, 184, 16, 137, 151, 196, 218, 132, 223, 35, 118, 115, 221, 143, 40, 97, 55, 231, 201, 242, 137, 156, 24, 128, 251, 122, 4, 107, 141, 238, 32, 5, 252, 48, 117, 154, 99, 12, 23, 175, 127, 98, 42, 40, 103, 20, 147, 162, 67, 247, 21, 233, 186, 43, 185, 215, 159, 143, 141, 28, 192, 111, 246, 240, 2, 113, 118, 173, 25, 141, 253, 43, 208, 25, 114, 38, 113, 240, 24, 231, 230, 97, 39, 150, 217, 55, 74, 208, 119, 158, 251, 211, 126, 250, 239, 16, 107, 58, 37, 245, 157, 230, 136, 181, 249, 233, 25, 160, 184, 146, 101, 174, 119, 166, 54, 94, 71, 96, 23, 203, 38, 166, 54, 123, 146, 41, 172, 213, 41, 98, 186, 55, 203, 34, 73, 0, 216, 113, 156, 239, 29, 169, 23, 228, 56, 77, 92, 216, 196, 145, 201, 10, 35, 89, 207, 247, 176, 13, 35, 208, 61, 67, 118, 86, 215, 46, 226, 84, 92, 53, 133, 213, 196, 39, 174, 124, 142, 81, 66, 69, 205, 211, 17, 152, 152, 176, 19, 114, 83, 82, 79, 203, 78, 204, 178, 217, 50, 192, 13, 9, 106, 8, 124, 142, 11, 243, 70, 251, 171, 82, 104, 95, 202, 222, 2, 105, 50, 222, 190, 39, 26, 112, 0, 10, 230, 186, 135, 248, 117, 212, 73, 205, 68, 56, 218, 196, 87, 130, 141, 165, 106, 24, 199, 0, 233, 240, 0, 111, 201, 72, 166, 84, 2, 229, 239, 249, 8, 113, 168, 81, 108, 77, 133, 214, 8, 154, 27, 145, 3, 62, 18, 176, 81, 24, 189, 2, 169, 255, 33, 245, 185, 23, 47, 45, 45, 245, 203, 94, 73, 225, 188, 229, 218, 59, 57, 28, 147, 240, 248, 78, 213, 110, 107, 138, 53, 246, 3, 233, 40, 237, 79, 8, 80, 178, 152, 84, 30, 87, 168, 19, 207, 188, 72, 34, 130, 45, 214, 21, 223, 161, 111, 185, 7, 210, 32, 74, 172, 164, 247, 55, 241, 225, 53, 92, 146, 180, 148, 39, 163, 228, 253, 59, 72, 228, 126, 24, 38, 73, 8, 8, 32, 238, 9, 135, 126, 150, 0, 126, 145, 78, 168, 122, 96, 113, 33, 237, 135, 236, 143, 205, 152, 174, 114, 251, 163, 52, 113, 34, 83, 8, 35, 98, 155, 238, 22, 3, 216, 174, 222, 252, 179, 22, 149, 85, 60, 131, 218, 214, 194, 145, 144, 58, 185, 58, 112, 113, 123, 14, 227, 74, 36, 221, 42, 137, 42, 69, 222, 113, 90, 30, 21, 217, 13, 147, 26, 130, 25, 28, 190, 32, 89, 154, 96, 194, 119, 233, 169, 97, 126, 165, 135, 201, 202, 148, 215, 213, 236, 12, 42, 247, 164, 105, 123, 164, 123, 183, 44, 37, 32, 238, 88, 94, 80, 195, 240, 138, 125, 103, 17, 65, 156, 125, 242, 181, 150, 75, 14, 121, 188, 68, 150, 13, 242, 198, 124, 240, 30, 187, 70, 191, 188, 131, 65, 144, 76, 40, 121, 6, 163, 76, 88, 132, 250, 233, 91, 38, 118, 198, 14, 48, 169, 179, 105, 219, 88, 75, 108, 137, 71, 0, 107, 194, 33, 81, 133, 24, 60, 98, 105, 109, 209, 8, 214, 111, 236, 17, 18, 9, 107, 85, 121, 88, 172, 22, 22, 9, 26, 101, 56, 1, 188, 240, 191, 162, 225, 149, 98, 168, 99, 66, 234, 19, 93, 160, 94, 160, 220, 249, 239, 70, 57, 99, 29, 242, 135, 19, 21, 11, 59, 124, 254, 214, 41, 103, 177, 225, 72, 51, 142, 86, 174, 105, 165, 41, 106, 101, 251, 11, 183, 117, 44, 33, 118, 242, 200, 88, 210, 204, 27, 205, 128, 87, 109, 231, 68, 19, 234, 245, 239, 124, 88, 169, 106, 152, 151, 207, 189, 244, 135, 33, 23, 10, 83, 197, 79, 221, 96, 55, 159, 88, 14, 123, 24, 192, 214, 86, 252, 189, 229, 87, 123, 6, 28, 58, 29, 130, 182, 221, 91, 248, 154, 222, 69, 249, 182, 118, 4, 167, 152, 102, 178, 178, 85, 150, 110, 220, 145, 169, 194, 64, 210, 0, 15, 48, 165, 17, 237, 24, 168, 205, 38, 131, 220, 166, 189, 48, 54, 30, 10, 96, 82, 84, 37, 126, 164, 201, 176, 133, 204, 64, 241, 13, 27, 26, 37, 154, 206, 20, 84, 164, 136, 236, 255, 202, 64, 47, 213, 174, 216, 61, 165, 115, 158, 98, 238, 126, 219, 145, 140, 220, 96, 104, 75, 103, 219, 25, 104, 193, 128, 35, 97, 33, 201, 102, 215, 101, 84, 90, 62, 116, 243, 2, 172, 143, 155, 126, 110, 184, 44, 167, 190, 61, 136, 119, 67, 32, 161, 152, 239, 38, 199, 19, 45, 181, 219, 132, 169, 56, 138, 136, 42, 129, 82, 23, 233, 94, 187, 187, 204, 93, 171, 175, 149, 217, 100, 36, 153, 82, 34, 183, 196, 187, 106, 23, 173, 223, 212, 247, 179, 22, 213, 53, 46, 164, 125, 61, 234, 113, 142, 229, 100, 229, 204, 146, 123, 24, 126, 83, 80, 183, 235, 86, 22, 210, 195, 110, 22, 59, 106, 9, 137, 196, 7, 181, 135, 118, 128, 241, 92, 39, 57, 39, 195, 60, 82, 222, 238, 216, 156, 148, 97, 129, 166, 252, 43, 126, 30, 91, 224, 14, 39 },
                            BirthDate = new DateTimeOffset(new DateTime(1975, 6, 21, 5, 23, 24, 664, DateTimeKind.Unspecified).AddTicks(9491), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Marco",
                            HireDate = new DateTimeOffset(new DateTime(2023, 9, 1, 17, 14, 56, 962, DateTimeKind.Unspecified).AddTicks(6785), new TimeSpan(0, 3, 0, 0, 0)),
                            LastName = "Considine",
                            PhoneNumber = "(496) 398-0061",
                            TeamId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Avatar = new byte[] { 128, 61, 159, 213, 168, 8, 29, 11, 137, 9, 87, 37, 16, 78, 255, 137, 32, 62, 224, 178, 1, 215, 206, 150, 253, 211, 137, 125, 125, 104, 235, 68, 219, 251, 142, 233, 15, 49, 220, 84, 130, 210, 142, 0, 174, 114, 124, 168, 41, 244, 162, 83, 249, 206, 227, 168, 111, 8, 215, 212, 126, 160, 141, 32, 29, 18, 73, 21, 191, 22, 122, 239, 98, 139, 47, 47, 73, 205, 232, 138, 86, 224, 83, 137, 198, 152, 74, 13, 23, 229, 122, 7, 89, 7, 213, 226, 68, 109, 227, 155, 40, 103, 233, 19, 122, 178, 241, 110, 158, 180, 95, 161, 32, 77, 126, 157, 77, 4, 90, 133, 199, 60, 253, 218, 155, 115, 149, 90, 182, 77, 234, 219, 234, 77, 98, 238, 247, 63, 14, 19, 166, 220, 110, 99, 133, 216, 230, 12, 137, 56, 148, 64, 18, 93, 211, 235, 106, 14, 120, 7, 29, 150, 184, 81, 201, 131, 183, 210, 234, 143, 165, 13, 245, 70, 222, 234, 206, 153, 84, 194, 140, 136, 209, 125, 184, 170, 201, 140, 121, 118, 131, 233, 199, 7, 246, 15, 36, 28, 153, 1, 32, 20, 34, 249, 146, 135, 74, 204, 126, 232, 28, 209, 185, 181, 123, 148, 197, 58, 152, 31, 186, 43, 89, 115, 11, 188, 69, 238, 79, 207, 198, 177, 255, 83, 161, 120, 102, 216, 235, 49, 95, 252, 13, 144, 90, 178, 47, 18, 139, 97, 74, 234, 131, 122, 71, 245, 186, 174, 237, 213, 65, 92, 124, 175, 34, 106, 209, 102, 19, 3, 45, 237, 78, 103, 191, 190, 30, 200, 25, 89, 140, 51, 98, 238, 132, 219, 45, 133, 12, 172, 189, 184, 234, 21, 239, 3, 128, 93, 109, 239, 225, 201, 255, 136, 52, 93, 155, 28, 187, 137, 215, 241, 148, 148, 73, 14, 250, 142, 43, 71, 60, 75, 90, 102, 69, 117, 2, 57, 119, 187, 61, 192, 91, 42, 119, 194, 51, 217, 185, 38, 63, 17, 202, 130, 213, 203, 35, 86, 204, 225, 9, 241, 49, 38, 178, 149, 111, 152, 66, 190, 91, 98, 165, 255, 75, 22, 150, 106, 28, 134, 218, 32, 212, 4, 7, 43, 129, 215, 145, 122, 81, 171, 109, 149, 178, 76, 142, 52, 120, 226, 83, 154, 151, 251, 203, 221, 108, 202, 55, 190, 52, 185, 57, 69, 6, 232, 29, 45, 30, 134, 19, 152, 7, 200, 108, 175, 245, 15, 76, 255, 135, 98, 241, 58, 51, 63, 137, 216, 57, 42, 191, 183, 159, 210, 69, 152, 113, 39, 142, 201, 46, 97, 21, 241, 206, 187, 147, 206, 142, 28, 231, 92, 126, 56, 55, 210, 199, 255, 18, 199, 95, 68, 243, 244, 199, 92, 248, 52, 130, 212, 61, 205, 128, 130, 208, 37, 76, 255, 108, 119, 172, 186, 73, 29, 66, 98, 57, 103, 154, 115, 208, 114, 21, 199, 106, 234, 110, 33, 42, 113, 194, 94, 76, 186, 222, 26, 219, 251, 103, 18, 134, 199, 147, 154, 27, 164, 250, 214, 178, 100, 35, 145, 153, 14, 3, 202, 184, 185, 23, 230, 183, 43, 213, 250, 181, 77, 110, 143, 62, 40, 135, 61, 255, 136, 237, 9, 223, 122, 172, 198, 239, 151, 111, 198, 78, 49, 196, 61, 183, 20, 97, 34, 227, 129, 90, 90, 242, 153, 229, 205, 54, 107, 152, 137, 220, 229, 146, 17, 33, 249, 235, 61, 12, 81, 246, 32, 188, 14, 172, 131, 136, 48, 215, 42, 199, 100, 90, 125, 46, 146, 22, 69, 149, 222, 143, 132, 254, 229, 233, 104, 159, 179, 28, 189, 40, 35, 21, 145, 138, 58, 158, 228, 236, 97, 69, 5, 147, 110, 194, 120, 139, 20, 226, 142, 226, 165, 168, 45, 193, 114, 33, 214, 36, 68, 228, 212, 20, 25, 1, 163, 78, 200, 243, 243, 243, 50, 88, 51, 153, 137, 240, 144, 34, 113, 220, 138, 208, 141, 218, 130, 122, 232, 207, 23, 25, 200, 191, 168, 125, 112, 241, 122, 108, 30, 41, 195, 32, 239, 155, 176, 76, 117, 148, 55, 130, 144, 179, 179, 103, 89, 3, 135, 62, 127, 40, 102, 248, 219, 218, 43, 115, 176, 182, 41, 152, 117, 36, 4, 71, 25, 105, 225, 242, 42, 53, 5, 83, 151, 148, 136, 20, 12, 65, 35, 108, 106, 59, 236, 245, 195, 202, 69, 20, 111, 60, 156, 191, 107, 159, 12, 108, 175, 108, 78, 240, 34, 149, 19, 74, 35, 18, 96, 70, 82, 23, 103, 110, 146, 188, 46, 58, 55, 14, 131, 79, 36, 204, 130, 238, 152, 69, 232, 248, 136, 27, 100, 160, 243, 51, 73, 212, 40, 162, 210, 176, 105, 254, 194, 87, 213, 46, 44, 174, 113, 210, 53, 161, 232, 254, 203, 86, 18, 37, 177, 221, 41, 104, 190, 54, 178, 199, 123, 95, 114, 89, 17, 148, 59, 210, 229, 38, 9, 43, 25, 106, 25, 58, 134, 181, 230, 195, 183, 244, 104, 243, 194, 2, 240, 244, 135, 0, 63, 140, 165, 13, 178, 205, 59, 24, 192, 160, 101, 21, 25, 164, 76, 231, 12, 71, 196, 239, 226, 9, 80, 239, 15, 135, 246, 126, 150, 15, 164, 71, 75, 228, 231, 125, 133, 11, 184, 75, 254, 110, 244, 69, 93, 162, 219, 195, 167, 219, 246, 169, 47, 152, 30, 53, 60, 182, 254, 43, 214, 188, 130, 177, 252, 30, 202, 52, 189, 206, 97, 1, 143, 121, 240, 116, 21, 10, 145, 109, 172, 51, 215, 187, 24, 250, 23, 179, 198, 177, 65, 207, 13, 140, 116, 66, 236, 66, 73, 63, 216, 166, 6, 216, 121, 245, 26, 182, 168, 170, 32, 49, 36, 144, 127, 163, 229, 198, 152, 2, 7, 22, 110, 11, 141, 145, 243, 2, 4, 173, 136, 210, 192, 81, 148, 5, 45, 254, 65, 35, 223, 96, 10, 27, 144, 15, 171, 124, 13 },
                            BirthDate = new DateTimeOffset(new DateTime(1994, 10, 22, 11, 39, 11, 584, DateTimeKind.Unspecified).AddTicks(2759), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Abel",
                            HireDate = new DateTimeOffset(new DateTime(2021, 10, 6, 11, 27, 4, 98, DateTimeKind.Unspecified).AddTicks(6668), new TimeSpan(0, 3, 0, 0, 0)),
                            LastName = "Zieme",
                            PhoneNumber = "(652) 735-5244 x079",
                            TeamId = 9,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Avatar = new byte[] { 78, 113, 210, 251, 122, 118, 230, 132, 116, 34, 166, 12, 83, 122, 126, 230, 119, 245, 52, 81, 98, 40, 121, 25, 211, 205, 50, 179, 89, 34, 198, 174, 16, 248, 66, 157, 216, 128, 147, 90, 117, 160, 53, 36, 145, 181, 229, 127, 204, 1, 137, 34, 125, 169, 192, 38, 248, 185, 40, 172, 67, 50, 42, 82, 91, 248, 251, 90, 56, 224, 14, 247, 98, 217, 219, 193, 242, 84, 135, 30, 232, 179, 231, 88, 153, 163, 48, 102, 56, 27, 165, 31, 88, 230, 22, 67, 117, 227, 200, 153, 185, 138, 70, 235, 243, 146, 192, 163, 206, 254, 51, 163, 49, 9, 196, 144, 75, 210, 185, 184, 199, 149, 33, 28, 58, 239, 158, 124, 195, 152, 76, 15, 140, 237, 101, 93, 108, 251, 101, 6, 227, 140, 152, 58, 231, 2, 237, 78, 33, 133, 247, 163, 41, 16, 210, 36, 105, 42, 176, 3, 243, 68, 224, 53, 178, 36, 23, 67, 164, 103, 36, 79, 109, 178, 212, 58, 252, 231, 52, 56, 1, 80, 90, 62, 160, 168, 229, 123, 27, 65, 244, 66, 75, 97, 19, 158, 172, 98, 136, 195, 234, 169, 169, 185, 97, 168, 54, 119, 59, 151, 39, 129, 245, 120, 1, 162, 233, 162, 149, 9, 62, 155, 40, 99, 115, 225, 4, 11, 159, 53, 142, 153, 95, 113, 77, 88, 167, 161, 220, 247, 114, 110, 63, 131, 25, 114, 77, 210, 95, 112, 181, 9, 205, 127, 132, 78, 128, 69, 70, 127, 164, 42, 215, 6, 8, 142, 34, 131, 43, 169, 251, 72, 197, 157, 150, 208, 92, 164, 74, 0, 148, 49, 171, 47, 128, 132, 204, 223, 237, 254, 215, 97, 90, 93, 83, 71, 150, 57, 123, 138, 80, 201, 167, 182, 116, 108, 68, 47, 232, 179, 242, 220, 251, 69, 234, 114, 126, 168, 133, 132, 194, 66, 150, 44, 209, 154, 237, 104, 74, 78, 58, 34, 41, 191, 176, 203, 138, 245, 186, 19, 64, 156, 247, 57, 11, 251, 101, 20, 114, 224, 201, 237, 179, 247, 200, 13, 51, 122, 228, 217, 126, 219, 228, 153, 121, 207, 178, 59, 149, 31, 232, 137, 237, 114, 67, 37, 74, 93, 32, 214, 53, 217, 246, 106, 133, 76, 111, 50, 247, 162, 151, 15, 17, 225, 148, 101, 184, 93, 192, 60, 72, 41, 127, 82, 248, 64, 0, 64, 179, 162, 194, 214, 89, 14, 164, 165, 229, 122, 19, 44, 96, 128, 68, 242, 135, 216, 119, 12, 222, 222, 109, 237, 156, 228, 142, 11, 89, 163, 114, 69, 76, 46, 126, 84, 223, 193, 182, 3, 60, 238, 127, 62, 73, 147, 219, 199, 229, 140, 202, 31, 200, 244, 98, 213, 52, 213, 57, 117, 128, 152, 76, 65, 7, 206, 224, 49, 1, 239, 18, 198, 34, 116, 207, 239, 94, 47, 163, 9, 8, 198, 38, 204, 217, 82, 125, 87, 204, 169, 31, 10, 136, 64, 131, 164, 162, 62, 54, 123, 178, 170, 197, 245, 122, 4, 253, 83, 36, 114, 118, 5, 50, 47, 108, 185, 114, 127, 103, 180, 80, 136, 101, 88, 207, 8, 61, 225, 241, 42, 77, 32, 249, 39, 86, 94, 0, 48, 82, 213, 85, 41, 50, 89, 50, 26, 215, 88, 211, 201, 49, 35, 214, 130, 42, 41, 68, 109, 38, 113, 198, 27, 98, 249, 37, 86, 12, 11, 216, 14, 185, 66, 44, 146, 94, 39, 85, 12, 37, 180, 48, 229, 13, 39, 249, 41, 73, 119, 252, 45, 25, 147, 10, 225, 14, 58, 198, 57, 52, 220, 14, 204, 127, 197, 16, 239, 247, 67, 35, 3, 211, 56, 71, 113, 64, 225, 13, 58, 0, 251, 12, 149, 14, 171, 244, 38, 56, 75, 132, 36, 96, 28, 215, 72, 166, 100, 101, 72, 23, 9, 50, 5, 83, 248, 89, 224, 75, 152, 160, 45, 44, 139, 56, 56, 207, 121, 189, 212, 208, 234, 183, 171, 191, 254, 163, 182, 96, 254, 203, 220, 124, 197, 35, 247, 200, 6, 65, 22, 82, 19, 218, 159, 170, 86, 248, 212, 228, 158, 121, 45, 166, 144, 120, 45, 81, 135, 70, 85, 85, 162, 128, 76, 205, 195, 177, 103, 104, 64, 112, 200, 56, 167, 130, 188, 15, 24, 0, 104, 5, 207, 210, 193, 133, 157, 54, 235, 77, 246, 166, 65, 192, 235, 193, 175, 147, 141, 210, 231, 165, 145, 107, 163, 46, 176, 245, 254, 14, 187, 29, 57, 134, 221, 80, 133, 208, 190, 199, 47, 141, 197, 25, 114, 154, 47, 8, 76, 230, 210, 40, 129, 70, 25, 195, 116, 99, 46, 147, 213, 168, 55, 221, 145, 216, 108, 186, 227, 155, 59, 223, 213, 198, 162, 89, 223, 119, 249, 9, 255, 167, 168, 24, 59, 146, 155, 242, 108, 25, 219, 34, 161, 42, 241, 134, 86, 232, 136, 153, 45, 116, 37, 177, 171, 243, 82, 187, 163, 192, 227, 252, 105, 37, 148, 45, 0, 31, 162, 254, 61, 122, 78, 201, 191, 25, 61, 170, 212, 28, 3, 247, 239, 96, 219, 138, 130, 247, 108, 71, 64, 224, 79, 172, 54, 222, 184, 124, 150, 196, 134, 54, 70, 137, 91, 179, 37, 91, 241, 145, 182, 167, 230, 135, 188, 235, 13, 9, 74, 9, 171, 9, 178, 90, 190, 92, 42, 161, 146, 224, 96, 193, 20, 16, 149, 204, 177, 101, 4, 39, 100, 38, 5, 218, 145, 152, 249, 199, 239, 74, 208, 175, 49, 141, 25, 124, 132, 235, 202, 255, 137, 132, 201, 16, 48, 244, 147, 214, 241, 240, 57, 168, 4, 34, 164, 132, 3, 215, 201, 38, 98, 99, 178, 72, 16, 177, 143, 134, 247, 25, 71, 198, 154, 5, 158, 224, 93, 245, 170, 156, 4, 35, 213, 255, 17, 40, 170, 15, 232, 148, 120, 173, 34, 164, 156, 37, 209, 129, 0, 127, 101, 12, 223, 216, 168 },
                            BirthDate = new DateTimeOffset(new DateTime(1987, 8, 31, 11, 17, 14, 761, DateTimeKind.Unspecified).AddTicks(9465), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Maud",
                            HireDate = new DateTimeOffset(new DateTime(2022, 7, 4, 1, 7, 35, 514, DateTimeKind.Unspecified).AddTicks(6366), new TimeSpan(0, 3, 0, 0, 0)),
                            LastName = "King",
                            PhoneNumber = "532.537.9230",
                            TeamId = 7,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Avatar = new byte[] { 128, 158, 98, 160, 154, 163, 246, 105, 120, 15, 220, 244, 42, 55, 247, 68, 253, 86, 157, 27, 172, 138, 37, 110, 105, 127, 245, 130, 92, 152, 30, 74, 25, 120, 229, 110, 124, 55, 13, 207, 23, 148, 11, 180, 74, 26, 2, 245, 42, 250, 143, 92, 153, 204, 90, 245, 120, 244, 54, 26, 173, 116, 12, 224, 240, 146, 219, 178, 82, 136, 199, 197, 72, 205, 3, 23, 127, 112, 35, 79, 125, 0, 87, 98, 8, 194, 176, 76, 29, 239, 246, 136, 1, 243, 33, 163, 136, 43, 196, 183, 62, 79, 163, 162, 50, 201, 19, 203, 200, 67, 117, 7, 208, 230, 157, 173, 28, 170, 215, 45, 226, 142, 148, 98, 146, 63, 196, 85, 171, 96, 142, 84, 172, 107, 17, 45, 93, 181, 47, 62, 175, 228, 131, 218, 121, 238, 184, 26, 85, 116, 134, 221, 83, 150, 213, 175, 186, 64, 15, 243, 5, 189, 31, 104, 180, 33, 91, 100, 213, 111, 79, 103, 122, 152, 126, 253, 11, 186, 232, 164, 134, 170, 255, 55, 217, 177, 0, 21, 150, 97, 114, 28, 165, 60, 57, 241, 196, 27, 37, 88, 146, 83, 68, 230, 36, 31, 99, 187, 24, 216, 164, 0, 88, 106, 108, 91, 190, 232, 143, 3, 33, 69, 206, 116, 252, 51, 193, 62, 95, 140, 56, 239, 148, 144, 17, 51, 101, 25, 18, 185, 77, 69, 252, 189, 188, 114, 195, 59, 207, 222, 51, 219, 139, 34, 54, 76, 132, 208, 233, 241, 94, 37, 91, 140, 159, 180, 107, 200, 88, 56, 245, 164, 214, 213, 181, 220, 73, 16, 183, 138, 111, 134, 110, 129, 89, 92, 100, 114, 89, 197, 174, 149, 47, 33, 91, 39, 233, 112, 30, 7, 7, 251, 226, 150, 232, 142, 5, 182, 108, 90, 3, 116, 24, 95, 129, 215, 183, 218, 51, 66, 80, 249, 111, 147, 138, 96, 117, 180, 121, 141, 243, 217, 242, 175, 131, 116, 164, 215, 152, 202, 86, 173, 5, 254, 193, 58, 124, 208, 160, 132, 112, 14, 60, 219, 183, 14, 139, 78, 12, 136, 25, 81, 61, 222, 103, 42, 129, 105, 220, 12, 51, 224, 66, 104, 236, 163, 243, 112, 210, 79, 227, 164, 20, 245, 29, 228, 156, 23, 248, 116, 232, 86, 202, 15, 177, 5, 112, 39, 151, 151, 185, 19, 244, 147, 80, 144, 204, 212, 239, 20, 26, 27, 123, 188, 164, 116, 61, 71, 193, 130, 141, 105, 112, 103, 35, 221, 21, 50, 183, 230, 50, 204, 216, 59, 150, 208, 176, 128, 164, 140, 24, 200, 40, 228, 90, 205, 218, 14, 107, 60, 200, 40, 101, 20, 9, 79, 162, 141, 112, 115, 123, 153, 28, 8, 225, 78, 66, 64, 37, 211, 196, 188, 163, 52, 106, 197, 65, 140, 13, 85, 3, 7, 199, 122, 29, 10, 102, 195, 49, 71, 45, 35, 15, 48, 17, 126, 171, 31, 3, 11, 138, 153, 232, 151, 120, 11, 132, 49, 170, 67, 14, 22, 127, 26, 112, 116, 209, 162, 234, 214, 232, 126, 15, 222, 166, 161, 173, 114, 34, 235, 26, 33, 136, 1, 203, 105, 30, 48, 2, 18, 133, 52, 25, 237, 57, 23, 163, 245, 192, 157, 173, 8, 52, 44, 35, 11, 138, 10, 241, 214, 94, 18, 14, 190, 41, 236, 141, 126, 79, 6, 85, 161, 160, 216, 81, 179, 101, 33, 164, 142, 254, 184, 177, 133, 62, 17, 237, 92, 222, 191, 223, 20, 63, 43, 179, 115, 38, 91, 196, 77, 137, 37, 165, 186, 71, 11, 104, 91, 218, 112, 166, 105, 101, 98, 216, 166, 96, 137, 128, 24, 255, 48, 159, 144, 38, 65, 98, 116, 37, 222, 141, 10, 92, 87, 5, 217, 18, 247, 61, 51, 168, 145, 129, 110, 24, 118, 174, 220, 83, 13, 18, 157, 218, 171, 77, 88, 133, 21, 147, 5, 168, 244, 54, 252, 227, 156, 12, 14, 93, 254, 147, 105, 75, 77, 111, 110, 175, 49, 120, 176, 147, 133, 32, 23, 203, 239, 47, 176, 9, 172, 84, 252, 99, 56, 138, 180, 90, 133, 138, 123, 106, 159, 127, 85, 121, 169, 81, 141, 60, 223, 169, 83, 157, 227, 114, 35, 211, 31, 48, 243, 109, 91, 4, 176, 170, 150, 5, 19, 195, 187, 19, 41, 166, 252, 70, 243, 5, 203, 158, 34, 158, 161, 116, 41, 2, 0, 95, 127, 197, 102, 225, 59, 84, 151, 13, 14, 154, 207, 170, 226, 163, 62, 202, 129, 204, 127, 172, 160, 157, 126, 29, 7, 128, 13, 85, 203, 231, 219, 173, 169, 55, 133, 77, 92, 217, 215, 213, 15, 238, 55, 88, 54, 32, 187, 127, 95, 215, 243, 93, 131, 84, 190, 226, 71, 73, 217, 186, 70, 66, 66, 39, 191, 33, 1, 171, 29, 241, 110, 167, 244, 170, 157, 177, 101, 37, 230, 230, 197, 142, 245, 244, 244, 126, 42, 84, 120, 163, 5, 19, 0, 29, 142, 204, 172, 16, 153, 21, 31, 16, 98, 109, 105, 75, 104, 216, 183, 12, 125, 34, 98, 242, 245, 184, 76, 77, 50, 65, 246, 172, 50, 121, 235, 91, 167, 215, 28, 209, 5, 84, 139, 208, 199, 180, 44, 136, 138, 168, 21, 82, 157, 107, 38, 227, 176, 13, 39, 213, 127, 95, 221, 88, 31, 114, 221, 232, 129, 14, 164, 145, 188, 230, 7, 40, 150, 145, 43, 64, 140, 196, 194, 138, 44, 163, 14, 198, 83, 8, 170, 153, 175, 70, 81, 165, 118, 51, 177, 84, 214, 67, 6, 124, 3, 131, 150, 183, 99, 253, 77, 30, 226, 231, 73, 186, 156, 83, 43, 124, 100, 23, 148, 121, 99, 11, 226, 117, 148, 97, 178, 98, 224, 214, 105, 72, 190, 70, 135, 168, 13, 86, 98, 85, 186, 140, 182, 200, 253, 150, 9, 35, 8, 53, 240, 191, 174, 140, 24, 248, 161, 32, 35 },
                            BirthDate = new DateTimeOffset(new DateTime(1990, 12, 23, 4, 5, 3, 550, DateTimeKind.Unspecified).AddTicks(3593), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Maddison",
                            HireDate = new DateTimeOffset(new DateTime(2020, 10, 18, 8, 47, 28, 371, DateTimeKind.Unspecified).AddTicks(6386), new TimeSpan(0, 3, 0, 0, 0)),
                            LastName = "Mueller",
                            PhoneNumber = "673-952-1380",
                            TeamId = 9,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            Avatar = new byte[] { 88, 142, 90, 171, 229, 169, 154, 49, 45, 143, 6, 236, 51, 96, 10, 206, 78, 170, 74, 253, 153, 179, 87, 132, 198, 227, 11, 111, 205, 65, 163, 135, 168, 37, 169, 188, 145, 146, 38, 212, 102, 203, 39, 60, 125, 130, 217, 83, 52, 240, 137, 169, 207, 122, 100, 164, 54, 213, 228, 2, 158, 42, 99, 236, 235, 126, 67, 13, 183, 77, 61, 187, 132, 118, 150, 206, 140, 27, 7, 68, 9, 184, 59, 221, 183, 250, 183, 46, 193, 5, 134, 187, 173, 35, 53, 60, 103, 59, 80, 254, 62, 204, 155, 231, 178, 205, 36, 89, 228, 149, 24, 27, 206, 160, 249, 229, 238, 134, 53, 240, 199, 21, 76, 178, 199, 129, 14, 97, 64, 90, 102, 81, 202, 8, 5, 61, 28, 84, 42, 233, 214, 94, 74, 43, 236, 107, 236, 13, 41, 80, 77, 225, 5, 95, 55, 40, 127, 233, 31, 48, 191, 194, 25, 137, 47, 199, 80, 198, 154, 188, 201, 154, 91, 75, 26, 104, 203, 32, 197, 92, 149, 1, 56, 240, 13, 132, 75, 106, 209, 221, 189, 50, 52, 249, 42, 19, 68, 192, 252, 37, 26, 38, 114, 108, 134, 178, 134, 186, 69, 206, 93, 95, 36, 195, 155, 190, 138, 41, 123, 170, 124, 229, 244, 189, 255, 151, 102, 97, 33, 7, 36, 10, 35, 159, 65, 110, 142, 204, 105, 91, 254, 144, 37, 3, 127, 94, 13, 112, 94, 107, 136, 27, 68, 82, 169, 52, 50, 180, 108, 239, 75, 36, 153, 61, 170, 82, 59, 133, 130, 45, 47, 190, 191, 32, 171, 235, 192, 241, 61, 161, 137, 246, 3, 181, 126, 8, 198, 209, 245, 13, 59, 217, 95, 122, 15, 217, 247, 232, 89, 45, 35, 136, 238, 48, 59, 202, 92, 36, 166, 190, 116, 65, 119, 203, 101, 84, 33, 227, 190, 162, 140, 105, 143, 116, 241, 86, 94, 68, 16, 210, 243, 216, 151, 16, 125, 1, 8, 210, 121, 179, 171, 161, 43, 54, 152, 250, 98, 147, 21, 186, 183, 20, 41, 183, 161, 185, 248, 121, 62, 229, 108, 24, 19, 211, 203, 155, 169, 102, 77, 99, 76, 78, 106, 10, 246, 234, 62, 88, 220, 246, 244, 203, 47, 85, 26, 223, 174, 224, 111, 196, 9, 143, 148, 148, 71, 146, 141, 87, 107, 253, 81, 251, 69, 177, 110, 105, 169, 30, 192, 182, 122, 159, 157, 71, 241, 161, 233, 190, 185, 235, 237, 200, 247, 137, 90, 189, 186, 213, 195, 99, 92, 231, 237, 222, 165, 248, 133, 125, 231, 177, 53, 144, 32, 185, 73, 105, 241, 76, 162, 166, 169, 207, 158, 127, 15, 136, 3, 188, 86, 176, 175, 212, 91, 92, 89, 147, 178, 190, 162, 248, 27, 107, 214, 8, 182, 92, 168, 62, 63, 241, 203, 110, 50, 28, 186, 141, 73, 109, 207, 28, 244, 201, 39, 54, 2, 97, 52, 195, 95, 182, 182, 51, 169, 170, 139, 61, 249, 149, 201, 179, 224, 197, 124, 100, 229, 64, 161, 62, 162, 204, 74, 69, 239, 134, 4, 82, 68, 159, 5, 85, 39, 229, 222, 137, 58, 151, 196, 136, 145, 124, 147, 179, 164, 27, 59, 46, 76, 194, 81, 193, 191, 245, 32, 147, 107, 113, 68, 35, 166, 56, 249, 89, 144, 115, 139, 251, 230, 242, 42, 77, 124, 24, 173, 38, 56, 150, 160, 211, 74, 213, 6, 129, 78, 68, 149, 49, 196, 75, 29, 200, 83, 161, 226, 89, 130, 58, 35, 48, 144, 64, 72, 89, 152, 3, 68, 167, 72, 250, 90, 212, 208, 113, 216, 208, 50, 119, 10, 75, 222, 89, 55, 155, 212, 97, 250, 219, 54, 84, 163, 254, 115, 112, 66, 9, 141, 172, 233, 74, 255, 238, 233, 201, 240, 73, 247, 226, 200, 17, 38, 11, 47, 215, 82, 55, 9, 172, 132, 54, 9, 105, 112, 244, 86, 92, 97, 96, 46, 206, 67, 133, 141, 192, 76, 239, 111, 109, 171, 139, 105, 23, 18, 36, 45, 152, 206, 156, 29, 11, 0, 224, 39, 179, 64, 149, 125, 244, 115, 147, 231, 151, 179, 249, 206, 160, 125, 111, 139, 99, 199, 155, 0, 248, 204, 242, 86, 76, 198, 190, 142, 196, 66, 34, 206, 98, 94, 218, 127, 182, 113, 122, 250, 24, 164, 210, 100, 25, 85, 140, 26, 95, 16, 186, 67, 100, 224, 46, 230, 78, 62, 48, 46, 180, 4, 34, 84, 144, 42, 107, 66, 163, 239, 212, 241, 76, 161, 232, 84, 250, 141, 61, 246, 57, 163, 46, 180, 135, 223, 105, 130, 47, 244, 49, 119, 64, 76, 69, 19, 129, 125, 211, 238, 234, 74, 119, 111, 59, 201, 247, 194, 247, 217, 235, 192, 1, 58, 244, 17, 213, 110, 205, 177, 193, 232, 18, 175, 190, 93, 176, 255, 92, 213, 211, 125, 186, 78, 12, 239, 43, 191, 120, 190, 231, 166, 139, 85, 8, 112, 118, 6, 88, 51, 61, 18, 175, 33, 45, 1, 55, 200, 177, 222, 24, 247, 101, 34, 6, 110, 6, 178, 45, 4, 229, 22, 246, 15, 202, 26, 93, 189, 166, 78, 230, 169, 166, 41, 151, 193, 205, 153, 33, 10, 183, 99, 13, 153, 165, 239, 65, 104, 79, 154, 106, 195, 216, 84, 77, 38, 27, 160, 87, 18, 164, 122, 33, 99, 247, 110, 81, 60, 138, 68, 160, 108, 144, 35, 76, 130, 8, 93, 106, 218, 217, 245, 109, 12, 227, 35, 209, 82, 219, 113, 166, 44, 65, 15, 102, 61, 65, 170, 161, 54, 158, 4, 221, 10, 249, 253, 50, 181, 7, 202, 29, 189, 54, 124, 56, 175, 12, 21, 127, 212, 157, 254, 96, 25, 158, 116, 42, 129, 189, 15, 65, 94, 188, 51, 59, 212, 23, 99, 19, 230, 240, 27, 75, 17, 83, 232, 246, 196, 214, 183, 48, 43, 43, 204, 152, 160, 164, 196, 108 },
                            BirthDate = new DateTimeOffset(new DateTime(1968, 3, 28, 13, 5, 10, 671, DateTimeKind.Unspecified).AddTicks(9328), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Kareem",
                            HireDate = new DateTimeOffset(new DateTime(2024, 2, 28, 19, 0, 48, 409, DateTimeKind.Unspecified).AddTicks(1173), new TimeSpan(0, 2, 0, 0, 0)),
                            LastName = "Lubowitz",
                            PhoneNumber = "1-237-876-7642 x91621",
                            TeamId = 9,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            Avatar = new byte[] { 130, 179, 79, 198, 181, 125, 102, 171, 6, 222, 21, 50, 239, 155, 155, 48, 82, 246, 141, 20, 63, 35, 83, 135, 147, 230, 243, 131, 113, 31, 134, 41, 146, 232, 22, 237, 85, 253, 182, 7, 108, 4, 241, 24, 115, 141, 18, 103, 165, 51, 68, 178, 116, 132, 164, 94, 95, 199, 50, 207, 138, 226, 57, 230, 87, 236, 159, 6, 133, 173, 219, 85, 64, 134, 167, 58, 49, 58, 19, 6, 212, 140, 222, 62, 218, 212, 181, 14, 68, 183, 141, 141, 203, 231, 125, 138, 203, 11, 193, 135, 237, 11, 225, 247, 88, 239, 114, 237, 221, 105, 44, 37, 179, 43, 250, 253, 4, 251, 12, 131, 54, 145, 193, 206, 32, 77, 137, 88, 9, 29, 111, 38, 121, 140, 25, 200, 171, 230, 229, 234, 97, 199, 49, 218, 138, 104, 217, 159, 236, 128, 134, 207, 254, 61, 80, 91, 73, 19, 215, 10, 102, 25, 228, 191, 249, 6, 171, 39, 18, 49, 82, 29, 22, 33, 34, 111, 96, 231, 67, 183, 116, 234, 107, 137, 151, 160, 39, 60, 59, 189, 126, 151, 14, 218, 132, 71, 226, 113, 225, 132, 189, 178, 140, 187, 45, 104, 185, 220, 26, 225, 251, 98, 208, 32, 150, 123, 173, 91, 40, 89, 222, 111, 235, 85, 179, 186, 15, 59, 157, 218, 140, 238, 6, 191, 250, 193, 93, 176, 91, 47, 230, 74, 33, 90, 193, 27, 199, 238, 67, 9, 153, 135, 73, 135, 165, 77, 198, 55, 7, 115, 88, 126, 63, 63, 84, 12, 92, 16, 38, 213, 29, 252, 0, 249, 115, 148, 77, 144, 147, 151, 243, 33, 247, 148, 65, 5, 165, 126, 26, 172, 250, 38, 169, 232, 214, 104, 11, 225, 6, 181, 191, 182, 199, 110, 235, 156, 135, 80, 19, 17, 0, 54, 164, 112, 127, 55, 134, 171, 254, 79, 103, 221, 246, 121, 218, 247, 83, 23, 34, 11, 137, 108, 138, 222, 216, 60, 89, 136, 168, 164, 126, 85, 107, 8, 172, 196, 130, 56, 104, 159, 225, 95, 226, 182, 77, 225, 192, 78, 148, 244, 73, 111, 45, 8, 136, 147, 171, 197, 152, 67, 222, 253, 2, 90, 209, 18, 114, 237, 205, 21, 116, 27, 175, 130, 41, 41, 137, 211, 144, 247, 123, 11, 244, 180, 91, 14, 39, 98, 128, 24, 25, 188, 160, 36, 193, 227, 93, 135, 229, 59, 110, 210, 128, 126, 127, 45, 191, 170, 223, 94, 10, 215, 53, 161, 200, 210, 9, 77, 255, 194, 234, 16, 109, 181, 252, 184, 123, 139, 193, 69, 204, 1, 237, 84, 136, 169, 139, 117, 53, 45, 79, 124, 131, 34, 14, 65, 134, 255, 92, 238, 217, 15, 136, 35, 81, 94, 101, 202, 130, 199, 178, 52, 233, 153, 146, 8, 234, 225, 24, 30, 71, 148, 24, 210, 114, 110, 140, 74, 166, 187, 49, 124, 46, 211, 108, 189, 121, 202, 3, 42, 67, 192, 243, 109, 122, 26, 147, 234, 143, 6, 87, 165, 230, 61, 166, 69, 246, 181, 176, 226, 209, 26, 36, 199, 149, 54, 5, 22, 45, 213, 142, 31, 221, 237, 218, 135, 161, 170, 88, 88, 219, 162, 186, 160, 100, 139, 149, 240, 44, 38, 198, 196, 25, 32, 89, 41, 155, 44, 216, 67, 20, 124, 189, 186, 119, 55, 199, 248, 98, 30, 164, 76, 93, 88, 7, 46, 95, 131, 98, 10, 161, 21, 233, 6, 14, 202, 6, 189, 148, 177, 235, 116, 210, 20, 67, 94, 229, 0, 41, 45, 196, 156, 142, 13, 129, 122, 102, 193, 24, 42, 201, 24, 201, 205, 162, 255, 147, 182, 172, 173, 49, 10, 100, 177, 51, 47, 121, 73, 20, 169, 73, 95, 90, 53, 70, 4, 135, 219, 133, 148, 99, 68, 164, 105, 232, 211, 171, 4, 113, 67, 203, 47, 84, 123, 251, 186, 55, 220, 218, 81, 0, 29, 172, 111, 225, 106, 190, 147, 135, 157, 120, 183, 48, 23, 74, 236, 101, 251, 201, 95, 132, 117, 215, 209, 221, 25, 11, 222, 57, 140, 205, 170, 1, 51, 148, 69, 152, 52, 135, 126, 20, 23, 125, 211, 203, 19, 254, 60, 49, 15, 84, 60, 19, 122, 205, 139, 70, 219, 145, 200, 94, 223, 90, 251, 208, 206, 182, 253, 130, 4, 84, 48, 115, 75, 75, 108, 248, 3, 6, 201, 27, 206, 173, 42, 55, 144, 150, 134, 102, 9, 255, 188, 162, 191, 31, 53, 189, 129, 3, 252, 93, 1, 186, 44, 186, 36, 200, 200, 47, 96, 147, 66, 213, 199, 172, 143, 50, 47, 196, 63, 56, 47, 151, 121, 5, 151, 141, 180, 43, 22, 175, 118, 0, 9, 108, 25, 20, 128, 111, 19, 200, 205, 87, 5, 118, 189, 231, 218, 18, 143, 2, 141, 189, 195, 196, 46, 105, 65, 39, 35, 150, 20, 157, 25, 177, 28, 65, 203, 91, 146, 123, 177, 191, 176, 119, 106, 215, 146, 2, 72, 175, 178, 161, 155, 19, 33, 185, 61, 69, 61, 176, 211, 89, 76, 124, 180, 48, 62, 83, 90, 123, 28, 127, 127, 19, 81, 206, 12, 75, 89, 86, 215, 62, 223, 115, 228, 114, 1, 5, 144, 99, 4, 134, 30, 226, 168, 88, 115, 52, 195, 58, 153, 62, 168, 204, 147, 51, 34, 136, 194, 83, 172, 242, 235, 231, 216, 148, 121, 217, 151, 65, 47, 56, 195, 246, 119, 150, 96, 156, 107, 249, 90, 215, 135, 31, 188, 153, 149, 18, 224, 177, 80, 121, 67, 60, 183, 17, 154, 55, 10, 20, 222, 154, 157, 129, 10, 97, 122, 177, 85, 253, 210, 133, 28, 201, 248, 212, 106, 203, 42, 62, 254, 102, 249, 230, 241, 181, 245, 134, 63, 101, 251, 41, 145, 87, 26, 192, 58, 6, 20, 91, 30, 228, 189, 227, 223, 202, 92, 122, 68, 226, 167, 206, 13, 204, 21, 119, 161, 182, 143 },
                            BirthDate = new DateTimeOffset(new DateTime(1979, 6, 10, 5, 40, 45, 665, DateTimeKind.Unspecified).AddTicks(6070), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Imogene",
                            HireDate = new DateTimeOffset(new DateTime(2025, 3, 21, 17, 4, 46, 316, DateTimeKind.Unspecified).AddTicks(8928), new TimeSpan(0, 2, 0, 0, 0)),
                            LastName = "Sanford",
                            PhoneNumber = "(866) 561-1862",
                            TeamId = 1,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            Avatar = new byte[] { 26, 169, 21, 7, 38, 89, 122, 66, 93, 189, 45, 28, 197, 65, 163, 31, 132, 118, 191, 240, 42, 113, 205, 225, 54, 215, 150, 203, 12, 72, 67, 23, 62, 172, 251, 206, 139, 175, 105, 251, 241, 177, 21, 50, 211, 139, 45, 132, 11, 24, 21, 237, 247, 222, 245, 168, 219, 52, 208, 79, 195, 174, 54, 20, 122, 21, 221, 25, 70, 213, 148, 212, 13, 196, 254, 120, 92, 155, 14, 170, 169, 18, 192, 244, 51, 86, 32, 96, 182, 82, 242, 87, 222, 26, 56, 66, 123, 0, 183, 190, 174, 19, 61, 54, 131, 64, 224, 50, 223, 125, 76, 64, 37, 37, 165, 177, 238, 66, 225, 35, 244, 124, 99, 244, 226, 61, 246, 243, 140, 188, 252, 91, 227, 79, 252, 149, 212, 138, 112, 242, 118, 237, 129, 56, 5, 177, 49, 184, 116, 135, 83, 57, 31, 148, 201, 49, 176, 73, 83, 70, 74, 237, 166, 34, 128, 241, 92, 214, 41, 15, 220, 100, 209, 239, 173, 7, 251, 43, 238, 49, 12, 61, 126, 5, 104, 194, 60, 79, 134, 203, 229, 138, 54, 41, 167, 136, 71, 94, 183, 20, 85, 90, 143, 101, 170, 239, 103, 48, 230, 194, 53, 133, 90, 34, 58, 12, 110, 161, 185, 189, 180, 13, 79, 93, 41, 81, 45, 168, 71, 36, 191, 156, 115, 218, 219, 177, 174, 25, 90, 121, 91, 11, 104, 196, 150, 96, 47, 20, 239, 154, 25, 166, 165, 249, 95, 71, 11, 50, 59, 88, 194, 191, 232, 193, 2, 153, 17, 128, 70, 137, 94, 85, 70, 64, 98, 169, 164, 139, 199, 201, 33, 24, 184, 172, 11, 25, 247, 121, 122, 147, 166, 124, 221, 1, 183, 155, 34, 167, 193, 252, 78, 175, 205, 102, 60, 196, 95, 101, 150, 182, 163, 127, 106, 113, 54, 169, 6, 60, 182, 233, 161, 152, 5, 178, 226, 226, 119, 68, 136, 199, 134, 253, 202, 202, 123, 114, 74, 82, 112, 70, 186, 145, 226, 196, 240, 38, 17, 108, 203, 14, 149, 230, 240, 216, 90, 182, 169, 27, 131, 89, 76, 26, 220, 207, 47, 165, 180, 160, 246, 196, 94, 179, 203, 111, 47, 16, 181, 65, 193, 187, 209, 11, 121, 122, 50, 159, 13, 241, 111, 197, 201, 47, 207, 22, 250, 159, 181, 19, 148, 75, 113, 112, 117, 7, 176, 225, 26, 128, 169, 74, 0, 103, 89, 199, 136, 64, 161, 98, 157, 144, 152, 195, 49, 49, 250, 46, 228, 180, 116, 143, 90, 162, 173, 118, 73, 96, 149, 114, 202, 80, 132, 140, 72, 36, 196, 97, 213, 7, 142, 186, 254, 83, 117, 4, 178, 174, 63, 68, 12, 129, 252, 101, 11, 25, 240, 94, 186, 227, 125, 39, 170, 46, 151, 76, 11, 11, 122, 12, 108, 153, 88, 220, 38, 186, 144, 7, 44, 169, 195, 154, 33, 80, 101, 73, 84, 31, 128, 46, 52, 101, 167, 242, 138, 103, 15, 207, 187, 41, 249, 167, 52, 50, 215, 115, 40, 32, 63, 80, 136, 232, 50, 17, 31, 226, 6, 90, 201, 78, 248, 236, 139, 75, 216, 7, 241, 101, 82, 190, 171, 193, 76, 2, 176, 28, 102, 238, 120, 242, 32, 51, 223, 47, 166, 75, 50, 149, 211, 167, 97, 181, 6, 108, 49, 12, 27, 233, 90, 208, 129, 194, 206, 129, 165, 199, 155, 47, 97, 2, 124, 23, 225, 215, 46, 196, 13, 91, 165, 140, 212, 91, 146, 170, 93, 246, 186, 224, 209, 163, 0, 125, 148, 168, 112, 94, 101, 93, 138, 222, 176, 2, 52, 208, 43, 73, 211, 47, 61, 108, 255, 192, 67, 205, 251, 37, 47, 35, 35, 174, 12, 186, 94, 190, 2, 255, 131, 56, 102, 208, 95, 175, 208, 198, 220, 209, 39, 193, 127, 20, 34, 139, 163, 101, 163, 64, 57, 198, 173, 74, 46, 65, 58, 219, 209, 245, 164, 118, 206, 43, 197, 155, 200, 109, 12, 80, 239, 125, 241, 41, 254, 110, 164, 15, 139, 128, 23, 248, 26, 194, 198, 189, 139, 28, 161, 30, 117, 245, 244, 230, 45, 177, 243, 83, 78, 135, 195, 53, 88, 82, 80, 188, 212, 131, 76, 191, 157, 42, 79, 80, 221, 171, 91, 12, 101, 8, 15, 172, 203, 238, 219, 250, 136, 10, 252, 77, 123, 80, 193, 4, 189, 226, 160, 200, 113, 10, 232, 8, 207, 225, 128, 74, 165, 163, 9, 129, 85, 230, 238, 69, 119, 23, 105, 105, 118, 85, 51, 201, 134, 255, 68, 77, 105, 75, 147, 251, 11, 146, 154, 91, 32, 7, 220, 233, 110, 145, 85, 228, 1, 123, 247, 148, 97, 123, 141, 166, 120, 54, 81, 28, 214, 30, 130, 208, 157, 51, 224, 89, 16, 14, 118, 194, 75, 147, 37, 112, 58, 128, 251, 229, 0, 79, 199, 10, 7, 175, 235, 238, 190, 236, 130, 212, 65, 126, 132, 1, 133, 11, 76, 58, 176, 251, 211, 243, 5, 52, 73, 205, 86, 29, 107, 248, 58, 107, 27, 135, 86, 119, 200, 237, 71, 242, 155, 36, 139, 161, 129, 204, 15, 35, 234, 47, 51, 192, 52, 4, 123, 212, 5, 211, 102, 29, 152, 161, 128, 138, 153, 213, 99, 253, 171, 13, 66, 95, 243, 190, 95, 175, 104, 100, 179, 124, 190, 50, 50, 60, 196, 121, 55, 22, 11, 130, 114, 245, 134, 41, 89, 250, 163, 0, 7, 171, 105, 17, 120, 221, 236, 212, 205, 118, 164, 204, 107, 161, 32, 233, 95, 101, 111, 68, 198, 31, 158, 76, 242, 40, 155, 77, 216, 201, 100, 101, 12, 103, 92, 7, 19, 172, 186, 85, 80, 239, 172, 193, 113, 62, 22, 209, 213, 157, 202, 243, 139, 95, 58, 231, 13, 29, 31, 79, 65, 159, 252, 3, 17, 63, 192, 4, 68, 25, 214, 178, 171, 25, 243, 215, 115, 221, 218, 179, 18, 202 },
                            BirthDate = new DateTimeOffset(new DateTime(2000, 9, 17, 19, 8, 55, 938, DateTimeKind.Unspecified).AddTicks(5342), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Stanley",
                            HireDate = new DateTimeOffset(new DateTime(2024, 12, 6, 18, 50, 20, 456, DateTimeKind.Unspecified).AddTicks(3217), new TimeSpan(0, 2, 0, 0, 0)),
                            LastName = "Grant",
                            PhoneNumber = "844.385.8789",
                            TeamId = 2,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            Avatar = new byte[] { 175, 50, 126, 18, 140, 188, 199, 23, 72, 113, 107, 98, 116, 47, 66, 107, 61, 119, 39, 193, 4, 160, 101, 19, 214, 207, 31, 223, 36, 65, 6, 66, 228, 202, 45, 167, 53, 0, 61, 187, 115, 231, 40, 104, 65, 203, 0, 202, 179, 33, 44, 156, 138, 48, 164, 15, 205, 107, 59, 189, 157, 231, 243, 6, 107, 40, 125, 169, 2, 154, 54, 61, 58, 107, 77, 28, 119, 252, 209, 11, 206, 84, 44, 2, 20, 106, 184, 180, 38, 29, 218, 201, 196, 127, 30, 140, 244, 34, 253, 25, 77, 87, 200, 24, 235, 239, 97, 30, 226, 135, 152, 208, 154, 47, 239, 72, 187, 240, 242, 0, 112, 201, 130, 228, 192, 109, 120, 186, 76, 193, 39, 84, 254, 184, 190, 118, 140, 19, 23, 37, 8, 153, 209, 158, 133, 9, 47, 148, 144, 214, 209, 4, 48, 252, 169, 131, 213, 227, 88, 125, 118, 167, 210, 33, 95, 67, 210, 226, 113, 120, 187, 167, 216, 204, 248, 214, 248, 227, 94, 182, 61, 228, 41, 117, 239, 35, 36, 2, 14, 58, 161, 169, 186, 153, 174, 96, 199, 175, 62, 65, 55, 77, 34, 23, 27, 41, 44, 99, 3, 210, 138, 241, 133, 161, 63, 145, 125, 92, 49, 60, 31, 207, 211, 54, 215, 18, 236, 62, 30, 151, 15, 72, 164, 28, 126, 240, 193, 18, 90, 197, 247, 193, 254, 60, 175, 175, 35, 25, 89, 28, 227, 106, 126, 2, 34, 103, 121, 235, 64, 8, 61, 237, 69, 108, 195, 66, 76, 104, 35, 79, 208, 107, 2, 107, 69, 94, 209, 151, 135, 39, 238, 211, 228, 1, 180, 165, 202, 162, 250, 22, 119, 213, 209, 81, 136, 9, 123, 146, 120, 109, 98, 187, 245, 10, 76, 120, 103, 18, 189, 196, 150, 226, 100, 24, 26, 105, 9, 67, 184, 30, 119, 170, 110, 12, 215, 250, 153, 176, 227, 59, 226, 63, 30, 25, 197, 50, 221, 217, 181, 60, 61, 184, 228, 53, 128, 148, 112, 185, 54, 30, 0, 56, 217, 89, 246, 183, 77, 233, 50, 82, 222, 182, 47, 130, 226, 87, 195, 75, 83, 231, 139, 47, 142, 123, 225, 190, 198, 56, 139, 67, 137, 224, 121, 196, 59, 169, 101, 196, 34, 13, 229, 244, 166, 99, 93, 134, 137, 98, 83, 41, 209, 37, 102, 79, 147, 208, 170, 93, 120, 55, 241, 21, 93, 239, 200, 253, 61, 107, 70, 56, 241, 254, 40, 69, 2, 151, 137, 43, 30, 90, 53, 99, 228, 98, 113, 99, 122, 42, 49, 106, 255, 7, 76, 235, 28, 208, 150, 182, 154, 96, 73, 29, 27, 27, 55, 210, 252, 32, 76, 251, 71, 127, 63, 29, 2, 142, 48, 251, 125, 100, 130, 18, 58, 220, 57, 233, 178, 61, 41, 50, 1, 210, 144, 189, 17, 23, 71, 201, 42, 159, 103, 90, 222, 53, 35, 127, 199, 46, 233, 141, 159, 154, 56, 53, 221, 54, 227, 63, 226, 78, 32, 191, 247, 26, 249, 116, 238, 130, 12, 234, 70, 103, 208, 222, 253, 40, 52, 4, 184, 185, 33, 132, 84, 155, 147, 102, 153, 91, 223, 218, 52, 7, 231, 220, 126, 168, 98, 196, 60, 174, 145, 69, 34, 254, 71, 56, 201, 89, 56, 181, 2, 223, 135, 40, 44, 156, 106, 91, 135, 146, 219, 147, 162, 49, 181, 62, 128, 244, 96, 85, 197, 112, 199, 9, 39, 220, 98, 85, 84, 90, 157, 63, 35, 42, 215, 84, 128, 190, 176, 226, 61, 6, 61, 170, 211, 253, 162, 240, 72, 8, 184, 213, 249, 226, 239, 146, 23, 125, 1, 79, 57, 21, 7, 44, 245, 155, 112, 120, 89, 97, 190, 193, 68, 125, 24, 191, 50, 29, 54, 41, 57, 113, 12, 75, 162, 199, 69, 64, 58, 68, 61, 2, 189, 96, 168, 39, 254, 16, 180, 55, 141, 42, 150, 231, 74, 246, 144, 124, 202, 48, 95, 250, 71, 215, 22, 200, 9, 188, 137, 45, 86, 47, 61, 20, 36, 187, 4, 228, 212, 240, 192, 34, 104, 255, 156, 14, 218, 36, 1, 172, 55, 200, 117, 10, 229, 66, 187, 229, 73, 224, 30, 66, 135, 135, 225, 93, 237, 129, 195, 142, 241, 172, 168, 218, 111, 61, 145, 71, 59, 7, 237, 228, 187, 220, 246, 141, 186, 50, 47, 225, 255, 30, 154, 243, 209, 126, 154, 225, 29, 62, 33, 88, 96, 114, 186, 138, 32, 155, 155, 167, 177, 115, 170, 66, 243, 58, 134, 171, 145, 83, 163, 187, 82, 226, 143, 211, 18, 180, 8, 241, 163, 176, 42, 252, 230, 148, 131, 72, 33, 107, 108, 30, 151, 136, 47, 139, 115, 87, 0, 151, 247, 239, 79, 201, 154, 102, 6, 126, 227, 231, 120, 108, 146, 169, 4, 1, 73, 174, 92, 95, 182, 62, 137, 37, 231, 133, 35, 201, 178, 3, 95, 186, 179, 113, 250, 179, 96, 96, 97, 128, 141, 5, 101, 57, 243, 255, 139, 237, 132, 46, 65, 197, 251, 161, 224, 185, 102, 42, 226, 21, 66, 60, 203, 223, 136, 189, 184, 33, 175, 80, 160, 233, 76, 220, 209, 176, 216, 79, 50, 231, 249, 54, 69, 132, 193, 153, 190, 18, 144, 65, 77, 54, 125, 76, 61, 80, 58, 134, 177, 53, 71, 106, 62, 52, 141, 88, 120, 31, 207, 47, 225, 22, 247, 251, 28, 12, 246, 71, 29, 238, 254, 165, 144, 110, 2, 106, 107, 0, 158, 128, 118, 81, 158, 253, 160, 142, 247, 17, 246, 105, 33, 159, 67, 96, 96, 55, 62, 130, 47, 48, 89, 243, 105, 194, 54, 161, 217, 208, 49, 34, 236, 119, 128, 78, 185, 143, 120, 250, 90, 141, 20, 229, 80, 180, 205, 95, 98, 47, 14, 203, 44, 233, 208, 109, 38, 131, 232, 219, 198, 254, 180, 39, 223, 211, 124, 169, 30, 244, 167, 208 },
                            BirthDate = new DateTimeOffset(new DateTime(1984, 12, 26, 23, 2, 35, 300, DateTimeKind.Unspecified).AddTicks(3738), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Tavares",
                            HireDate = new DateTimeOffset(new DateTime(2021, 5, 22, 23, 40, 21, 127, DateTimeKind.Unspecified).AddTicks(9209), new TimeSpan(0, 3, 0, 0, 0)),
                            LastName = "Marquardt",
                            PhoneNumber = "360-293-5351",
                            TeamId = 6,
                            UserId = 10
                        },
                        new
                        {
                            Id = 11,
                            Avatar = new byte[] { 53, 167, 156, 52, 92, 216, 237, 5, 124, 55, 35, 65, 109, 136, 61, 12, 232, 193, 46, 81, 178, 225, 51, 230, 239, 191, 10, 101, 121, 221, 121, 2, 11, 204, 114, 41, 34, 15, 203, 201, 47, 110, 37, 125, 209, 149, 209, 33, 132, 89, 13, 66, 120, 193, 117, 84, 115, 181, 68, 156, 205, 135, 140, 159, 190, 33, 54, 160, 22, 20, 234, 217, 245, 100, 34, 67, 187, 182, 21, 89, 238, 233, 225, 31, 207, 54, 137, 73, 87, 29, 181, 108, 202, 47, 252, 167, 226, 134, 190, 175, 95, 48, 11, 111, 111, 52, 76, 20, 159, 49, 153, 188, 160, 235, 173, 228, 165, 109, 207, 135, 151, 237, 73, 248, 95, 125, 14, 198, 104, 122, 97, 53, 248, 101, 250, 190, 221, 114, 175, 155, 234, 117, 170, 37, 132, 248, 204, 223, 129, 24, 1, 117, 182, 54, 24, 114, 230, 18, 16, 242, 38, 133, 172, 36, 208, 99, 196, 58, 240, 239, 6, 51, 189, 52, 157, 33, 66, 35, 115, 102, 176, 46, 69, 79, 121, 236, 126, 193, 76, 135, 215, 203, 98, 189, 117, 100, 201, 133, 85, 32, 51, 145, 238, 145, 17, 206, 183, 129, 152, 247, 47, 194, 158, 169, 65, 247, 64, 92, 171, 227, 229, 3, 237, 105, 23, 59, 208, 255, 191, 57, 87, 189, 206, 83, 50, 30, 63, 179, 62, 170, 52, 253, 40, 85, 88, 21, 44, 184, 124, 125, 35, 109, 218, 113, 59, 48, 164, 133, 122, 214, 253, 184, 193, 95, 159, 114, 244, 75, 118, 34, 183, 140, 30, 0, 175, 231, 218, 151, 17, 2, 15, 24, 131, 66, 22, 234, 226, 92, 23, 2, 122, 186, 57, 103, 172, 124, 59, 201, 182, 229, 32, 224, 66, 89, 198, 150, 79, 217, 194, 84, 85, 12, 116, 120, 199, 229, 52, 127, 73, 181, 143, 152, 51, 116, 167, 253, 83, 182, 83, 50, 171, 17, 225, 43, 225, 46, 213, 41, 124, 127, 154, 9, 153, 195, 172, 110, 70, 192, 160, 199, 71, 188, 128, 0, 86, 136, 172, 206, 177, 200, 66, 153, 133, 143, 168, 67, 42, 72, 150, 152, 15, 10, 3, 201, 26, 134, 254, 112, 199, 57, 182, 147, 21, 140, 235, 239, 145, 224, 212, 89, 129, 7, 119, 179, 60, 1, 131, 9, 27, 105, 67, 253, 42, 7, 183, 60, 184, 182, 230, 208, 137, 60, 6, 120, 18, 175, 132, 248, 164, 184, 178, 73, 115, 61, 23, 8, 146, 80, 141, 25, 2, 245, 84, 94, 246, 185, 104, 13, 213, 174, 54, 219, 250, 4, 208, 68, 0, 255, 161, 140, 125, 138, 101, 98, 182, 249, 137, 237, 240, 175, 169, 104, 41, 204, 206, 148, 231, 168, 129, 88, 70, 118, 35, 246, 129, 215, 79, 111, 108, 210, 7, 147, 175, 0, 156, 119, 144, 242, 167, 252, 47, 123, 29, 37, 4, 206, 177, 46, 54, 60, 93, 88, 126, 72, 69, 6, 103, 110, 225, 223, 170, 26, 128, 30, 168, 22, 185, 40, 47, 86, 4, 245, 0, 132, 41, 202, 89, 253, 241, 179, 37, 32, 56, 48, 117, 174, 21, 102, 186, 149, 16, 33, 17, 200, 82, 21, 251, 255, 125, 237, 21, 137, 254, 223, 55, 103, 87, 249, 31, 122, 173, 105, 124, 45, 186, 137, 225, 79, 169, 249, 1, 82, 110, 153, 70, 226, 228, 56, 50, 19, 207, 90, 127, 4, 157, 156, 34, 89, 248, 13, 87, 27, 71, 63, 232, 166, 164, 227, 13, 201, 51, 172, 86, 132, 236, 195, 26, 100, 152, 85, 131, 30, 198, 11, 171, 83, 233, 120, 144, 29, 103, 136, 86, 155, 162, 229, 10, 46, 177, 160, 61, 0, 42, 104, 224, 34, 4, 251, 23, 217, 129, 189, 192, 163, 137, 56, 84, 59, 147, 149, 188, 44, 82, 240, 98, 171, 85, 186, 226, 6, 184, 236, 179, 248, 23, 130, 243, 93, 43, 136, 79, 238, 96, 182, 156, 170, 200, 179, 18, 105, 144, 206, 154, 27, 227, 17, 174, 58, 6, 52, 205, 74, 24, 17, 33, 149, 9, 199, 140, 6, 68, 247, 16, 10, 70, 206, 203, 156, 83, 183, 227, 162, 167, 120, 117, 233, 81, 151, 21, 5, 212, 185, 86, 246, 187, 5, 213, 79, 149, 7, 160, 0, 38, 12, 36, 153, 190, 143, 213, 21, 70, 18, 230, 78, 81, 42, 162, 159, 155, 55, 67, 113, 178, 134, 49, 139, 160, 25, 79, 65, 248, 123, 6, 76, 23, 226, 123, 155, 84, 219, 43, 193, 193, 255, 190, 194, 210, 8, 164, 145, 98, 53, 179, 93, 196, 47, 78, 160, 218, 153, 249, 165, 64, 148, 28, 202, 11, 154, 55, 111, 174, 7, 75, 191, 12, 129, 175, 178, 199, 111, 185, 151, 116, 190, 222, 194, 200, 168, 136, 232, 148, 219, 192, 186, 226, 133, 129, 45, 227, 244, 182, 55, 208, 53, 226, 90, 234, 243, 81, 66, 127, 155, 216, 106, 223, 97, 48, 130, 181, 90, 2, 98, 18, 79, 219, 211, 70, 144, 221, 134, 0, 130, 207, 211, 184, 130, 199, 63, 219, 131, 216, 212, 87, 69, 104, 248, 2, 86, 218, 128, 85, 254, 119, 137, 241, 84, 36, 128, 90, 14, 20, 89, 21, 202, 65, 253, 204, 5, 178, 93, 154, 241, 166, 50, 129, 45, 10, 204, 230, 226, 208, 240, 181, 93, 49, 1, 11, 70, 225, 100, 93, 70, 229, 204, 111, 126, 190, 140, 3, 107, 44, 253, 164, 125, 229, 100, 87, 69, 7, 196, 73, 88, 154, 119, 62, 36, 163, 184, 153, 64, 241, 134, 35, 77, 0, 83, 11, 218, 194, 3, 111, 126, 201, 123, 182, 211, 76, 56, 119, 204, 170, 198, 62, 29, 27, 5, 172, 109, 142, 75, 219, 6, 243, 195, 121, 166, 217, 86, 124, 146, 88, 125, 130, 4, 84, 203, 142, 30, 193, 107 },
                            BirthDate = new DateTimeOffset(new DateTime(1995, 11, 1, 20, 36, 5, 820, DateTimeKind.Unspecified).AddTicks(6357), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Milo",
                            HireDate = new DateTimeOffset(new DateTime(2025, 1, 14, 14, 15, 15, 126, DateTimeKind.Unspecified).AddTicks(3876), new TimeSpan(0, 2, 0, 0, 0)),
                            LastName = "Schiller",
                            PhoneNumber = "(357) 510-9094 x469",
                            TeamId = 9,
                            UserId = 11
                        },
                        new
                        {
                            Id = 12,
                            Avatar = new byte[] { 249, 245, 188, 229, 116, 44, 68, 58, 200, 79, 118, 141, 172, 35, 115, 112, 197, 38, 45, 78, 95, 211, 35, 129, 235, 186, 50, 10, 220, 235, 64, 137, 29, 177, 113, 226, 174, 91, 88, 105, 231, 12, 62, 226, 133, 25, 242, 40, 4, 183, 163, 100, 215, 179, 176, 38, 209, 59, 249, 186, 250, 57, 94, 220, 15, 236, 112, 250, 177, 144, 194, 106, 206, 196, 102, 83, 148, 65, 251, 210, 199, 9, 5, 36, 72, 220, 177, 106, 1, 75, 16, 115, 97, 158, 110, 173, 173, 97, 211, 152, 169, 247, 118, 116, 245, 57, 149, 19, 76, 93, 145, 144, 63, 39, 242, 240, 52, 57, 147, 51, 58, 6, 249, 101, 128, 78, 8, 48, 85, 184, 165, 51, 109, 99, 40, 207, 146, 145, 47, 15, 70, 158, 29, 163, 186, 128, 51, 57, 171, 125, 121, 115, 205, 160, 93, 162, 254, 17, 243, 166, 49, 101, 189, 148, 184, 94, 34, 220, 254, 34, 93, 162, 10, 132, 236, 156, 233, 85, 171, 0, 27, 206, 132, 216, 62, 49, 101, 205, 5, 133, 209, 129, 157, 137, 222, 224, 225, 136, 235, 92, 93, 87, 58, 137, 31, 215, 105, 73, 179, 193, 185, 169, 102, 243, 139, 98, 225, 229, 85, 134, 249, 85, 215, 121, 81, 220, 4, 129, 166, 12, 186, 96, 105, 78, 162, 196, 147, 251, 184, 103, 200, 28, 25, 67, 203, 39, 27, 169, 253, 123, 254, 251, 50, 101, 99, 8, 128, 193, 55, 67, 210, 231, 162, 167, 7, 89, 63, 23, 81, 199, 206, 230, 45, 238, 189, 220, 59, 147, 173, 41, 193, 91, 131, 43, 13, 190, 45, 4, 235, 154, 68, 209, 195, 116, 149, 224, 121, 114, 60, 114, 231, 3, 88, 54, 172, 24, 206, 68, 167, 134, 204, 236, 20, 13, 130, 119, 100, 118, 154, 72, 43, 59, 44, 182, 131, 252, 35, 184, 89, 220, 99, 200, 87, 58, 65, 189, 2, 76, 126, 244, 240, 233, 92, 100, 205, 87, 189, 181, 242, 29, 124, 2, 216, 244, 70, 172, 215, 162, 179, 176, 245, 22, 234, 203, 35, 3, 148, 218, 203, 197, 116, 24, 248, 165, 88, 66, 223, 199, 232, 43, 63, 109, 198, 59, 96, 96, 240, 99, 243, 149, 229, 96, 152, 206, 255, 218, 254, 145, 65, 201, 194, 226, 233, 44, 169, 99, 10, 51, 156, 4, 205, 16, 186, 136, 112, 135, 79, 175, 106, 195, 19, 49, 230, 54, 223, 20, 127, 42, 165, 125, 67, 77, 133, 30, 104, 92, 132, 153, 146, 253, 85, 189, 199, 238, 200, 213, 166, 15, 93, 120, 138, 79, 38, 126, 182, 145, 252, 178, 77, 148, 227, 224, 141, 30, 193, 127, 138, 155, 32, 20, 2, 182, 28, 109, 109, 86, 105, 247, 110, 10, 110, 112, 204, 45, 243, 244, 39, 7, 104, 214, 96, 209, 76, 253, 25, 117, 47, 169, 45, 72, 74, 10, 239, 73, 117, 211, 50, 185, 16, 95, 39, 4, 68, 67, 37, 115, 19, 96, 42, 204, 88, 130, 51, 73, 179, 49, 106, 30, 83, 248, 39, 192, 202, 37, 191, 100, 128, 131, 183, 31, 193, 109, 247, 8, 175, 91, 141, 8, 216, 165, 98, 206, 126, 96, 240, 200, 214, 166, 149, 68, 105, 19, 101, 23, 56, 102, 58, 30, 131, 193, 243, 144, 169, 10, 10, 234, 139, 43, 153, 88, 164, 97, 70, 174, 150, 88, 65, 105, 53, 246, 141, 218, 237, 115, 181, 174, 7, 223, 207, 72, 33, 110, 133, 22, 178, 209, 37, 115, 86, 5, 61, 171, 12, 61, 159, 8, 204, 183, 129, 223, 37, 209, 233, 140, 52, 24, 162, 53, 84, 92, 226, 171, 92, 81, 54, 54, 220, 47, 252, 196, 51, 205, 19, 47, 185, 225, 205, 176, 211, 173, 225, 80, 94, 239, 35, 80, 132, 248, 226, 153, 47, 239, 30, 249, 34, 145, 79, 187, 6, 105, 43, 157, 187, 188, 171, 87, 190, 185, 210, 82, 74, 242, 98, 167, 122, 146, 77, 108, 46, 230, 177, 228, 76, 98, 149, 68, 174, 25, 12, 40, 146, 18, 169, 106, 129, 68, 149, 161, 67, 204, 145, 203, 37, 144, 78, 60, 141, 119, 126, 144, 67, 226, 140, 31, 184, 71, 80, 88, 39, 103, 168, 164, 173, 170, 191, 56, 73, 247, 37, 54, 252, 172, 41, 97, 84, 229, 190, 188, 19, 88, 183, 55, 154, 123, 228, 175, 133, 137, 177, 57, 244, 60, 121, 220, 35, 237, 30, 122, 208, 22, 243, 149, 82, 71, 148, 151, 185, 43, 202, 210, 137, 147, 69, 206, 175, 113, 9, 49, 198, 16, 178, 191, 70, 235, 66, 192, 50, 76, 62, 103, 199, 67, 235, 253, 101, 34, 228, 83, 231, 76, 245, 90, 190, 222, 176, 96, 247, 170, 44, 178, 227, 236, 180, 192, 100, 51, 78, 102, 5, 211, 100, 108, 236, 98, 11, 69, 167, 71, 104, 141, 140, 182, 73, 121, 26, 87, 0, 104, 58, 226, 200, 136, 32, 140, 132, 218, 143, 43, 152, 50, 211, 126, 77, 19, 232, 137, 110, 91, 211, 107, 184, 175, 66, 159, 37, 44, 163, 59, 165, 13, 50, 230, 43, 35, 11, 220, 76, 96, 222, 48, 181, 123, 175, 54, 185, 14, 104, 54, 144, 145, 232, 165, 148, 207, 41, 25, 69, 129, 102, 87, 55, 83, 133, 139, 255, 237, 82, 42, 8, 11, 60, 13, 125, 162, 181, 60, 0, 11, 229, 23, 195, 109, 170, 20, 36, 141, 81, 92, 249, 242, 150, 203, 249, 134, 248, 98, 246, 36, 55, 204, 187, 62, 45, 132, 84, 219, 40, 242, 25, 237, 25, 58, 155, 79, 148, 202, 168, 112, 102, 114, 155, 245, 49, 22, 117, 113, 20, 246, 169, 83, 70, 219, 212, 24, 91, 133, 63, 38, 192, 73, 101, 95, 67, 12, 217, 92, 47, 170, 242, 46 },
                            BirthDate = new DateTimeOffset(new DateTime(1989, 1, 21, 14, 42, 52, 447, DateTimeKind.Unspecified).AddTicks(9615), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Narciso",
                            HireDate = new DateTimeOffset(new DateTime(2020, 12, 13, 0, 26, 22, 874, DateTimeKind.Unspecified).AddTicks(9013), new TimeSpan(0, 2, 0, 0, 0)),
                            LastName = "Rempel",
                            PhoneNumber = "1-905-754-0357 x8974",
                            TeamId = 8,
                            UserId = 12
                        },
                        new
                        {
                            Id = 13,
                            Avatar = new byte[] { 102, 130, 243, 14, 138, 130, 176, 29, 12, 59, 178, 36, 61, 25, 66, 105, 3, 123, 153, 193, 30, 14, 231, 149, 120, 40, 22, 221, 130, 51, 23, 125, 101, 155, 245, 172, 183, 227, 163, 55, 212, 160, 184, 246, 19, 232, 218, 246, 160, 93, 45, 204, 44, 229, 31, 87, 155, 93, 150, 98, 107, 210, 155, 217, 35, 53, 191, 161, 35, 149, 177, 31, 216, 98, 236, 126, 86, 241, 130, 144, 78, 31, 61, 36, 5, 75, 80, 128, 124, 157, 16, 89, 77, 64, 203, 2, 5, 223, 210, 221, 40, 56, 210, 10, 172, 14, 244, 202, 248, 160, 0, 170, 218, 6, 20, 76, 149, 118, 211, 216, 229, 62, 36, 133, 132, 87, 210, 151, 150, 234, 121, 119, 31, 165, 103, 21, 77, 50, 120, 247, 86, 134, 135, 219, 157, 102, 127, 71, 43, 127, 108, 142, 11, 249, 248, 234, 20, 77, 133, 84, 59, 92, 51, 14, 39, 137, 139, 53, 159, 255, 254, 98, 254, 219, 129, 95, 183, 72, 232, 30, 216, 138, 107, 23, 125, 234, 107, 37, 173, 125, 0, 0, 172, 36, 187, 249, 82, 121, 179, 19, 219, 74, 168, 44, 128, 10, 144, 48, 120, 153, 51, 203, 100, 103, 123, 176, 240, 28, 144, 61, 29, 101, 135, 34, 254, 254, 181, 217, 32, 135, 13, 61, 148, 212, 66, 142, 226, 63, 150, 115, 90, 59, 173, 20, 73, 53, 155, 68, 168, 10, 8, 53, 232, 118, 246, 117, 194, 134, 45, 129, 84, 182, 16, 240, 139, 245, 54, 143, 37, 237, 206, 177, 134, 29, 227, 226, 184, 115, 216, 201, 99, 112, 49, 21, 126, 216, 84, 30, 222, 204, 203, 92, 17, 20, 30, 163, 43, 188, 136, 84, 254, 12, 31, 186, 60, 87, 174, 202, 147, 19, 188, 79, 173, 100, 30, 227, 133, 250, 113, 179, 160, 24, 176, 89, 34, 113, 160, 113, 255, 63, 182, 252, 235, 132, 202, 86, 81, 118, 216, 39, 41, 137, 138, 203, 15, 124, 174, 172, 246, 58, 29, 48, 75, 212, 179, 229, 91, 198, 152, 203, 183, 61, 203, 83, 93, 192, 99, 41, 154, 199, 146, 15, 34, 73, 138, 22, 142, 229, 73, 166, 194, 243, 123, 196, 33, 133, 176, 23, 208, 228, 251, 139, 221, 13, 112, 235, 190, 54, 109, 78, 24, 133, 18, 46, 168, 14, 14, 1, 73, 156, 87, 118, 124, 242, 9, 195, 194, 6, 49, 215, 16, 76, 89, 181, 204, 7, 49, 20, 217, 158, 88, 87, 119, 250, 141, 61, 225, 76, 28, 19, 119, 175, 205, 51, 141, 133, 14, 235, 4, 172, 41, 183, 4, 150, 62, 203, 43, 92, 98, 161, 221, 250, 39, 170, 68, 255, 254, 129, 100, 203, 226, 118, 234, 30, 95, 96, 127, 37, 40, 70, 248, 69, 16, 45, 117, 160, 82, 224, 188, 194, 17, 132, 233, 122, 53, 125, 135, 34, 239, 141, 134, 140, 135, 56, 201, 179, 204, 230, 54, 221, 76, 6, 52, 27, 168, 151, 233, 249, 53, 163, 173, 29, 197, 162, 186, 94, 140, 111, 233, 226, 217, 92, 53, 154, 191, 108, 190, 215, 100, 193, 211, 108, 169, 222, 117, 10, 79, 205, 210, 157, 147, 141, 237, 75, 224, 105, 198, 228, 125, 107, 39, 93, 253, 84, 4, 239, 208, 154, 91, 60, 217, 17, 149, 116, 207, 64, 115, 231, 44, 175, 14, 190, 157, 75, 79, 75, 111, 233, 186, 86, 165, 218, 90, 249, 154, 118, 111, 85, 217, 134, 58, 181, 114, 150, 196, 129, 248, 120, 124, 159, 245, 223, 183, 206, 92, 104, 191, 177, 5, 185, 128, 230, 223, 5, 150, 255, 183, 156, 217, 88, 209, 30, 13, 166, 117, 88, 76, 7, 134, 205, 83, 246, 109, 26, 97, 197, 34, 140, 156, 49, 183, 189, 80, 32, 6, 83, 213, 109, 255, 197, 202, 91, 159, 35, 206, 215, 210, 17, 88, 3, 28, 184, 43, 56, 101, 137, 121, 197, 163, 208, 220, 43, 255, 168, 161, 19, 206, 236, 160, 34, 131, 223, 7, 192, 2, 247, 87, 73, 76, 138, 243, 17, 51, 153, 20, 254, 146, 23, 187, 124, 217, 16, 201, 46, 232, 158, 91, 246, 129, 186, 8, 229, 112, 53, 128, 61, 176, 106, 53, 109, 49, 47, 121, 25, 221, 203, 247, 102, 147, 163, 129, 182, 49, 35, 72, 114, 21, 217, 216, 99, 155, 96, 200, 145, 129, 13, 160, 253, 25, 215, 77, 39, 226, 77, 75, 170, 151, 175, 81, 28, 167, 245, 99, 222, 57, 82, 180, 77, 237, 14, 39, 215, 146, 209, 209, 208, 103, 231, 152, 207, 43, 249, 77, 188, 85, 90, 211, 228, 216, 158, 218, 101, 136, 187, 188, 166, 253, 233, 88, 46, 89, 83, 16, 10, 175, 118, 148, 16, 123, 122, 67, 175, 23, 129, 241, 173, 168, 167, 137, 223, 127, 208, 116, 79, 51, 193, 79, 215, 21, 43, 210, 125, 143, 106, 118, 216, 232, 66, 12, 223, 197, 195, 105, 94, 90, 42, 78, 6, 201, 14, 254, 86, 96, 121, 175, 136, 222, 193, 215, 237, 39, 189, 251, 79, 167, 197, 32, 173, 10, 25, 196, 101, 154, 170, 25, 187, 102, 22, 244, 9, 115, 72, 13, 6, 45, 124, 29, 22, 186, 237, 249, 39, 107, 30, 184, 7, 200, 25, 182, 149, 10, 161, 251, 176, 74, 152, 188, 182, 95, 243, 34, 200, 205, 206, 122, 222, 175, 244, 34, 43, 167, 9, 242, 29, 31, 157, 250, 123, 242, 18, 243, 77, 95, 94, 254, 209, 76, 93, 188, 149, 192, 103, 183, 199, 203, 49, 90, 156, 164, 217, 87, 211, 247, 139, 238, 1, 174, 222, 145, 173, 157, 64, 195, 76, 255, 212, 104, 110, 207, 168, 145, 82, 55, 140, 106, 63, 81, 43, 81, 237, 66, 94, 214, 24, 186, 31, 85, 211, 112, 253 },
                            BirthDate = new DateTimeOffset(new DateTime(1983, 6, 7, 0, 26, 23, 575, DateTimeKind.Unspecified).AddTicks(8127), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Candace",
                            HireDate = new DateTimeOffset(new DateTime(2020, 9, 26, 18, 34, 23, 713, DateTimeKind.Unspecified).AddTicks(541), new TimeSpan(0, 3, 0, 0, 0)),
                            LastName = "Leuschke",
                            PhoneNumber = "1-503-866-0610",
                            TeamId = 3,
                            UserId = 13
                        },
                        new
                        {
                            Id = 14,
                            Avatar = new byte[] { 175, 131, 140, 163, 106, 63, 105, 171, 145, 224, 127, 149, 253, 210, 133, 35, 134, 40, 148, 235, 155, 230, 100, 90, 37, 86, 145, 218, 208, 182, 131, 234, 178, 194, 78, 159, 225, 40, 165, 185, 21, 248, 216, 230, 119, 51, 238, 250, 118, 36, 126, 116, 214, 53, 18, 200, 31, 49, 126, 19, 174, 143, 218, 219, 92, 149, 226, 59, 131, 230, 65, 93, 130, 219, 213, 163, 13, 125, 227, 241, 104, 150, 99, 172, 55, 15, 19, 124, 175, 134, 128, 175, 170, 146, 11, 134, 30, 253, 138, 226, 81, 179, 119, 144, 226, 32, 241, 251, 96, 111, 186, 161, 78, 140, 170, 23, 43, 46, 164, 77, 129, 101, 139, 253, 102, 145, 178, 240, 208, 78, 133, 16, 243, 1, 159, 181, 30, 211, 201, 23, 29, 24, 28, 64, 203, 222, 97, 29, 231, 243, 91, 239, 89, 60, 96, 236, 39, 121, 42, 81, 109, 1, 42, 17, 234, 169, 174, 76, 237, 245, 249, 88, 101, 140, 47, 104, 72, 74, 50, 135, 48, 149, 8, 221, 243, 149, 183, 182, 160, 179, 141, 165, 168, 120, 169, 28, 238, 11, 86, 34, 47, 20, 48, 242, 250, 2, 138, 204, 13, 248, 163, 220, 71, 162, 32, 216, 248, 77, 29, 84, 241, 248, 172, 57, 103, 83, 175, 236, 227, 18, 122, 61, 244, 15, 88, 27, 100, 22, 227, 241, 10, 235, 168, 168, 15, 177, 94, 6, 87, 209, 36, 160, 238, 1, 48, 54, 104, 247, 139, 166, 83, 157, 233, 250, 125, 102, 231, 55, 74, 4, 116, 225, 106, 44, 74, 5, 79, 3, 41, 181, 244, 169, 149, 17, 238, 217, 79, 242, 223, 33, 179, 109, 139, 60, 158, 108, 2, 174, 42, 169, 201, 39, 187, 82, 93, 67, 54, 194, 183, 42, 231, 100, 205, 213, 177, 169, 8, 215, 12, 164, 23, 245, 88, 40, 81, 6, 85, 45, 141, 221, 3, 161, 217, 128, 236, 205, 237, 66, 180, 171, 163, 141, 59, 180, 58, 78, 159, 182, 138, 244, 99, 43, 162, 134, 146, 212, 207, 147, 0, 86, 237, 8, 52, 217, 39, 70, 139, 77, 232, 228, 187, 197, 34, 97, 0, 138, 185, 163, 237, 3, 103, 159, 163, 153, 122, 216, 255, 82, 237, 23, 253, 89, 66, 94, 189, 154, 88, 98, 140, 244, 194, 81, 205, 165, 57, 158, 8, 64, 133, 7, 27, 43, 166, 253, 238, 77, 101, 155, 95, 79, 70, 56, 95, 208, 230, 97, 131, 196, 163, 102, 49, 86, 22, 249, 65, 21, 210, 253, 95, 220, 207, 190, 205, 230, 252, 210, 179, 68, 111, 112, 52, 189, 3, 61, 173, 137, 242, 252, 191, 215, 26, 68, 157, 31, 214, 196, 20, 173, 187, 217, 123, 104, 59, 131, 127, 136, 107, 121, 212, 20, 174, 62, 84, 51, 49, 115, 83, 217, 75, 183, 35, 213, 61, 136, 193, 139, 33, 174, 15, 56, 189, 6, 136, 150, 244, 204, 130, 128, 190, 37, 29, 120, 40, 170, 41, 219, 239, 105, 237, 98, 112, 59, 97, 4, 181, 165, 42, 178, 193, 243, 102, 189, 105, 155, 86, 167, 181, 189, 62, 101, 240, 211, 27, 37, 154, 170, 173, 147, 95, 230, 155, 183, 192, 173, 200, 130, 164, 132, 225, 78, 161, 207, 190, 202, 190, 96, 14, 141, 84, 129, 37, 50, 43, 136, 113, 156, 32, 59, 105, 10, 248, 151, 83, 219, 88, 175, 252, 188, 211, 212, 2, 49, 220, 239, 195, 32, 21, 80, 103, 58, 156, 32, 62, 221, 192, 105, 140, 56, 59, 43, 98, 104, 27, 214, 86, 10, 124, 227, 114, 15, 99, 81, 186, 128, 127, 244, 86, 59, 196, 80, 135, 207, 212, 47, 110, 216, 88, 118, 26, 239, 35, 196, 129, 167, 113, 153, 22, 6, 153, 185, 164, 50, 222, 88, 214, 74, 102, 190, 93, 204, 19, 80, 116, 234, 163, 146, 148, 235, 103, 126, 177, 6, 200, 131, 235, 158, 208, 18, 14, 230, 222, 80, 162, 10, 172, 85, 240, 124, 88, 36, 114, 154, 24, 78, 220, 210, 80, 151, 3, 223, 5, 42, 158, 27, 8, 157, 105, 91, 108, 56, 122, 83, 176, 119, 238, 195, 174, 105, 62, 78, 162, 24, 146, 67, 11, 22, 238, 121, 167, 25, 78, 57, 14, 47, 225, 179, 177, 135, 1, 14, 235, 149, 15, 32, 169, 30, 233, 160, 96, 24, 36, 230, 89, 180, 61, 236, 152, 90, 15, 241, 175, 239, 180, 83, 233, 65, 68, 129, 150, 58, 17, 38, 103, 47, 99, 12, 8, 113, 154, 237, 44, 77, 25, 142, 244, 103, 224, 89, 242, 244, 26, 87, 119, 16, 95, 251, 224, 188, 54, 104, 217, 104, 9, 37, 7, 253, 127, 41, 81, 48, 228, 38, 192, 34, 196, 97, 214, 38, 95, 130, 97, 234, 143, 162, 31, 185, 174, 87, 208, 103, 43, 76, 58, 49, 19, 196, 68, 244, 134, 246, 232, 182, 8, 193, 15, 243, 151, 85, 75, 253, 37, 186, 93, 180, 7, 239, 217, 103, 5, 78, 78, 39, 89, 234, 4, 151, 236, 142, 15, 0, 29, 226, 159, 104, 153, 170, 226, 205, 146, 44, 33, 89, 12, 210, 66, 112, 239, 134, 41, 36, 234, 221, 238, 56, 168, 192, 93, 30, 188, 120, 7, 8, 70, 74, 224, 66, 27, 244, 26, 93, 12, 11, 212, 217, 44, 245, 26, 134, 167, 147, 168, 101, 101, 235, 21, 63, 244, 103, 192, 217, 77, 196, 16, 26, 36, 25, 18, 194, 241, 255, 85, 250, 107, 204, 23, 222, 8, 20, 12, 178, 165, 214, 118, 41, 207, 161, 163, 91, 52, 160, 78, 179, 52, 65, 16, 71, 251, 185, 181, 18, 226, 88, 148, 168, 62, 173, 249, 153, 211, 55, 54, 223, 91, 13, 51, 118, 78, 231, 74, 130, 118, 183, 141, 81, 176, 162, 197, 42, 188, 208 },
                            BirthDate = new DateTimeOffset(new DateTime(1968, 1, 2, 10, 54, 25, 844, DateTimeKind.Unspecified).AddTicks(3931), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Hettie",
                            HireDate = new DateTimeOffset(new DateTime(2023, 7, 8, 20, 10, 42, 404, DateTimeKind.Unspecified).AddTicks(9181), new TimeSpan(0, 3, 0, 0, 0)),
                            LastName = "Cole",
                            PhoneNumber = "388-617-8912 x8820",
                            TeamId = 4,
                            UserId = 14
                        },
                        new
                        {
                            Id = 15,
                            Avatar = new byte[] { 88, 39, 14, 153, 249, 19, 111, 51, 156, 43, 203, 67, 247, 155, 231, 207, 221, 3, 83, 231, 128, 98, 61, 230, 52, 128, 252, 40, 218, 108, 46, 144, 231, 65, 74, 158, 28, 34, 214, 207, 223, 44, 92, 164, 129, 253, 214, 79, 58, 216, 44, 132, 169, 129, 239, 245, 234, 40, 100, 121, 23, 70, 88, 48, 252, 58, 92, 182, 81, 73, 178, 186, 44, 132, 8, 84, 5, 153, 100, 55, 169, 173, 238, 1, 63, 170, 231, 101, 82, 84, 180, 244, 190, 93, 184, 153, 211, 44, 167, 71, 161, 32, 253, 241, 37, 114, 88, 36, 121, 154, 240, 80, 195, 45, 207, 105, 88, 86, 240, 82, 83, 247, 100, 253, 148, 190, 251, 207, 204, 110, 128, 217, 241, 28, 149, 136, 176, 253, 220, 205, 81, 194, 235, 183, 100, 99, 48, 145, 141, 78, 64, 124, 59, 85, 244, 169, 188, 255, 92, 103, 118, 137, 88, 10, 26, 22, 95, 166, 151, 71, 185, 91, 122, 35, 0, 144, 12, 173, 153, 49, 142, 106, 65, 125, 46, 4, 157, 156, 40, 236, 204, 176, 160, 117, 86, 200, 105, 224, 157, 77, 3, 137, 249, 70, 149, 229, 1, 24, 84, 99, 157, 14, 102, 42, 217, 11, 71, 219, 220, 21, 121, 195, 126, 171, 122, 9, 186, 5, 204, 56, 39, 43, 15, 76, 45, 4, 112, 251, 232, 72, 2, 133, 71, 197, 78, 189, 73, 118, 156, 74, 129, 142, 3, 135, 211, 64, 11, 78, 204, 139, 43, 252, 75, 28, 60, 114, 255, 26, 253, 212, 155, 75, 242, 148, 19, 244, 123, 184, 92, 188, 191, 68, 105, 130, 183, 152, 39, 136, 120, 237, 248, 34, 47, 92, 29, 6, 57, 43, 137, 220, 190, 47, 120, 199, 175, 53, 155, 111, 115, 223, 196, 82, 241, 16, 203, 230, 146, 201, 100, 163, 74, 118, 162, 16, 220, 120, 28, 150, 118, 13, 186, 79, 47, 128, 253, 144, 203, 162, 210, 129, 253, 184, 20, 152, 40, 165, 48, 30, 145, 54, 115, 112, 198, 229, 145, 72, 140, 104, 235, 54, 24, 5, 248, 102, 36, 117, 34, 113, 18, 58, 27, 240, 246, 227, 165, 146, 97, 9, 232, 54, 72, 253, 4, 63, 153, 73, 136, 74, 238, 181, 4, 98, 183, 156, 105, 248, 191, 174, 115, 178, 130, 191, 11, 86, 27, 131, 122, 227, 63, 255, 230, 131, 128, 181, 237, 26, 0, 184, 204, 218, 236, 216, 130, 93, 54, 184, 57, 89, 122, 173, 211, 179, 149, 53, 179, 137, 241, 174, 36, 22, 207, 164, 10, 239, 206, 128, 226, 1, 174, 78, 247, 6, 226, 153, 197, 170, 60, 174, 31, 99, 73, 32, 105, 146, 44, 51, 238, 74, 2, 100, 40, 82, 148, 181, 11, 71, 206, 146, 143, 182, 213, 55, 171, 43, 181, 204, 208, 252, 111, 8, 76, 67, 142, 193, 204, 175, 59, 120, 195, 155, 146, 152, 255, 73, 38, 165, 113, 44, 141, 126, 219, 170, 31, 105, 141, 18, 117, 62, 220, 95, 98, 241, 218, 249, 24, 228, 195, 211, 232, 92, 12, 86, 207, 243, 35, 61, 55, 97, 5, 15, 90, 164, 110, 241, 44, 162, 36, 36, 51, 186, 57, 253, 155, 99, 57, 160, 189, 6, 49, 65, 226, 158, 68, 49, 113, 133, 218, 43, 69, 80, 219, 19, 57, 204, 4, 190, 131, 232, 204, 117, 192, 159, 160, 46, 34, 15, 186, 107, 186, 131, 128, 48, 47, 195, 45, 188, 95, 61, 128, 167, 199, 249, 222, 227, 223, 38, 195, 206, 95, 122, 28, 212, 58, 187, 129, 66, 254, 22, 15, 98, 203, 111, 113, 194, 207, 170, 228, 117, 159, 71, 94, 70, 104, 37, 174, 198, 192, 188, 78, 252, 75, 235, 12, 63, 102, 172, 246, 115, 65, 234, 190, 73, 45, 29, 219, 87, 135, 28, 19, 53, 65, 78, 47, 23, 28, 214, 107, 21, 13, 186, 130, 65, 199, 18, 23, 223, 99, 49, 91, 35, 179, 112, 51, 180, 137, 20, 24, 75, 73, 86, 63, 164, 169, 25, 186, 253, 188, 244, 34, 144, 64, 224, 102, 135, 104, 124, 130, 26, 6, 252, 244, 86, 192, 239, 129, 209, 26, 123, 141, 7, 189, 32, 204, 182, 123, 222, 152, 173, 88, 25, 35, 110, 15, 203, 227, 210, 10, 172, 75, 12, 145, 253, 68, 76, 98, 232, 227, 186, 152, 233, 227, 64, 103, 26, 210, 32, 20, 176, 11, 138, 228, 213, 194, 236, 217, 134, 71, 245, 12, 174, 198, 109, 47, 129, 117, 192, 220, 127, 83, 146, 250, 222, 20, 110, 54, 226, 7, 244, 249, 195, 190, 89, 161, 193, 39, 188, 59, 87, 115, 220, 161, 237, 173, 233, 34, 117, 16, 230, 165, 18, 68, 149, 92, 121, 143, 6, 192, 83, 182, 246, 127, 83, 252, 73, 240, 109, 204, 110, 89, 185, 133, 132, 12, 119, 240, 13, 48, 43, 76, 192, 209, 33, 78, 231, 127, 40, 253, 39, 50, 33, 251, 231, 161, 125, 93, 78, 241, 100, 249, 181, 169, 162, 140, 235, 140, 191, 136, 229, 136, 130, 214, 149, 7, 245, 36, 93, 4, 21, 202, 199, 112, 164, 60, 56, 189, 157, 227, 143, 26, 161, 27, 203, 49, 150, 23, 47, 148, 99, 90, 191, 160, 23, 159, 175, 74, 102, 223, 171, 88, 255, 74, 220, 154, 49, 69, 5, 101, 84, 45, 239, 219, 249, 202, 230, 102, 10, 99, 113, 222, 244, 201, 160, 187, 10, 39, 88, 4, 140, 237, 87, 190, 56, 54, 26, 87, 63, 49, 0, 81, 17, 201, 63, 53, 106, 228, 166, 76, 185, 73, 63, 2, 110, 204, 99, 53, 170, 32, 143, 9, 236, 0, 217, 103, 214, 49, 163, 195, 176, 143, 38, 217, 99, 31, 204, 43, 138, 107, 80, 38, 129, 11, 75, 66, 173, 85, 79, 107, 210, 229, 172 },
                            BirthDate = new DateTimeOffset(new DateTime(1971, 8, 28, 20, 24, 39, 918, DateTimeKind.Unspecified).AddTicks(231), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Wyman",
                            HireDate = new DateTimeOffset(new DateTime(2021, 11, 20, 18, 15, 22, 56, DateTimeKind.Unspecified).AddTicks(8242), new TimeSpan(0, 2, 0, 0, 0)),
                            LastName = "Cassin",
                            PhoneNumber = "972.291.9811",
                            TeamId = 5,
                            UserId = 15
                        },
                        new
                        {
                            Id = 16,
                            Avatar = new byte[] { 208, 105, 136, 225, 181, 150, 185, 129, 225, 55, 240, 202, 226, 7, 56, 108, 186, 187, 58, 178, 12, 22, 229, 158, 110, 33, 31, 72, 182, 0, 107, 154, 58, 110, 77, 55, 110, 131, 91, 90, 30, 222, 88, 8, 241, 210, 71, 26, 45, 50, 148, 68, 254, 248, 50, 186, 131, 233, 114, 147, 118, 113, 202, 224, 204, 86, 144, 116, 185, 0, 254, 54, 95, 224, 147, 46, 189, 220, 173, 156, 217, 5, 26, 131, 108, 38, 155, 66, 59, 147, 179, 133, 17, 200, 227, 173, 19, 119, 60, 155, 66, 211, 96, 44, 52, 93, 228, 29, 100, 4, 252, 166, 60, 213, 186, 113, 86, 71, 116, 165, 186, 78, 56, 38, 76, 120, 37, 151, 252, 230, 26, 70, 160, 17, 90, 6, 164, 237, 79, 14, 65, 126, 221, 54, 151, 12, 73, 59, 13, 114, 86, 203, 2, 150, 224, 243, 154, 58, 223, 187, 56, 77, 32, 126, 233, 182, 6, 42, 123, 179, 205, 104, 248, 102, 100, 60, 112, 2, 142, 63, 47, 234, 137, 138, 143, 78, 67, 10, 49, 102, 107, 105, 13, 147, 214, 244, 93, 95, 76, 225, 6, 31, 192, 89, 165, 238, 211, 156, 50, 164, 131, 152, 171, 160, 139, 77, 195, 150, 238, 154, 115, 251, 248, 20, 72, 99, 90, 100, 144, 111, 222, 17, 181, 173, 57, 16, 42, 47, 229, 161, 123, 166, 216, 141, 227, 211, 189, 109, 7, 136, 48, 199, 112, 177, 110, 10, 38, 171, 17, 65, 147, 111, 12, 194, 197, 114, 226, 254, 102, 123, 35, 147, 176, 77, 31, 204, 35, 107, 49, 117, 166, 236, 92, 7, 62, 23, 160, 3, 63, 46, 234, 126, 30, 164, 13, 11, 154, 21, 199, 112, 240, 191, 7, 140, 100, 157, 22, 35, 145, 161, 231, 186, 121, 156, 154, 166, 18, 4, 131, 173, 209, 222, 190, 56, 145, 165, 117, 12, 63, 20, 50, 13, 163, 192, 132, 230, 229, 208, 163, 161, 1, 124, 114, 157, 71, 47, 5, 130, 9, 103, 248, 149, 146, 25, 159, 17, 0, 206, 251, 191, 39, 9, 228, 125, 111, 217, 22, 184, 23, 180, 192, 66, 97, 225, 172, 85, 108, 32, 241, 97, 159, 243, 3, 215, 27, 156, 122, 137, 33, 114, 229, 22, 213, 228, 122, 247, 152, 244, 46, 109, 24, 76, 106, 85, 166, 182, 52, 176, 109, 74, 165, 224, 221, 153, 31, 52, 6, 12, 97, 210, 94, 141, 151, 165, 206, 169, 109, 125, 103, 180, 188, 119, 242, 131, 72, 82, 137, 174, 49, 101, 104, 202, 28, 215, 204, 5, 57, 59, 196, 69, 241, 139, 147, 91, 14, 139, 181, 196, 134, 252, 72, 183, 73, 184, 141, 45, 237, 89, 81, 204, 171, 88, 219, 252, 105, 148, 112, 191, 216, 200, 112, 50, 184, 33, 195, 48, 228, 150, 117, 188, 157, 196, 39, 52, 28, 177, 128, 99, 74, 158, 23, 223, 233, 247, 154, 153, 176, 151, 242, 121, 27, 246, 236, 189, 139, 22, 254, 39, 245, 92, 73, 87, 228, 148, 47, 230, 49, 167, 223, 184, 20, 13, 117, 57, 177, 145, 72, 193, 135, 41, 128, 77, 164, 252, 161, 167, 216, 105, 168, 6, 178, 88, 109, 237, 85, 192, 251, 84, 199, 180, 104, 9, 184, 57, 101, 13, 128, 178, 12, 250, 205, 61, 160, 203, 220, 252, 179, 231, 243, 136, 13, 199, 254, 216, 5, 187, 160, 136, 228, 240, 150, 243, 249, 211, 193, 119, 149, 106, 150, 148, 38, 38, 92, 173, 56, 117, 184, 161, 17, 89, 13, 19, 97, 63, 166, 160, 10, 223, 51, 169, 109, 248, 206, 28, 100, 218, 68, 205, 10, 101, 103, 72, 80, 95, 98, 231, 107, 80, 160, 144, 3, 254, 118, 139, 227, 130, 146, 186, 45, 33, 108, 181, 54, 237, 38, 45, 87, 64, 73, 94, 49, 234, 151, 172, 241, 196, 194, 2, 220, 190, 53, 186, 63, 163, 166, 110, 129, 67, 56, 225, 72, 137, 160, 233, 248, 177, 17, 99, 56, 52, 144, 43, 7, 65, 95, 24, 103, 202, 153, 30, 192, 143, 221, 110, 236, 178, 118, 147, 71, 183, 171, 20, 7, 103, 22, 167, 74, 174, 179, 64, 179, 94, 202, 168, 46, 9, 178, 253, 68, 141, 7, 183, 170, 26, 33, 184, 172, 49, 252, 70, 58, 126, 28, 128, 136, 123, 35, 159, 43, 184, 206, 185, 22, 88, 107, 97, 197, 52, 64, 226, 255, 121, 79, 185, 176, 244, 106, 237, 70, 93, 250, 24, 177, 109, 6, 53, 66, 73, 31, 178, 230, 19, 210, 139, 190, 77, 160, 82, 175, 191, 243, 119, 240, 26, 70, 193, 46, 98, 208, 148, 17, 54, 88, 205, 189, 181, 8, 169, 81, 53, 31, 124, 20, 142, 252, 236, 166, 195, 251, 98, 84, 24, 61, 135, 106, 130, 40, 150, 38, 69, 6, 224, 120, 139, 161, 175, 186, 5, 206, 9, 69, 246, 0, 121, 160, 118, 99, 98, 30, 90, 26, 107, 103, 110, 63, 249, 249, 209, 98, 59, 141, 113, 131, 12, 47, 62, 3, 136, 236, 77, 49, 161, 245, 241, 28, 93, 23, 196, 230, 244, 31, 197, 120, 203, 43, 155, 121, 10, 76, 168, 182, 233, 163, 146, 124, 212, 115, 243, 74, 97, 115, 218, 117, 209, 41, 120, 117, 117, 81, 226, 225, 53, 234, 110, 27, 199, 248, 183, 225, 148, 197, 248, 60, 68, 150, 71, 254, 98, 117, 71, 233, 36, 121, 133, 128, 69, 79, 167, 162, 178, 37, 3, 185, 105, 198, 128, 255, 52, 118, 180, 219, 188, 18, 182, 155, 122, 157, 48, 58, 226, 121, 19, 0, 9, 248, 188, 187, 101, 237, 214, 119, 81, 20, 46, 110, 194, 63, 211, 125, 22, 72, 201, 235, 193, 108, 45, 17, 195, 233, 6, 167, 31, 108, 192, 56, 18, 3, 175, 112, 9 },
                            BirthDate = new DateTimeOffset(new DateTime(1968, 4, 23, 20, 47, 40, 195, DateTimeKind.Unspecified).AddTicks(5652), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Dorothy",
                            HireDate = new DateTimeOffset(new DateTime(2023, 6, 25, 13, 48, 52, 593, DateTimeKind.Unspecified).AddTicks(6101), new TimeSpan(0, 3, 0, 0, 0)),
                            LastName = "Parker",
                            PhoneNumber = "(391) 587-6899 x80016",
                            TeamId = 9,
                            UserId = 16
                        },
                        new
                        {
                            Id = 17,
                            Avatar = new byte[] { 248, 123, 230, 47, 88, 228, 84, 245, 92, 190, 144, 98, 116, 80, 173, 130, 76, 132, 226, 133, 45, 123, 15, 204, 221, 108, 72, 38, 136, 235, 196, 18, 165, 94, 205, 30, 97, 112, 227, 165, 83, 238, 235, 26, 170, 103, 62, 211, 236, 46, 219, 186, 186, 69, 125, 124, 107, 26, 82, 236, 156, 46, 109, 112, 250, 125, 189, 21, 131, 143, 32, 219, 161, 61, 50, 63, 143, 245, 33, 117, 45, 117, 58, 90, 16, 10, 87, 95, 225, 80, 178, 70, 30, 247, 8, 36, 129, 122, 32, 44, 170, 41, 79, 92, 13, 255, 25, 125, 19, 62, 237, 118, 249, 220, 191, 38, 244, 18, 96, 240, 38, 93, 52, 51, 220, 218, 189, 169, 52, 14, 189, 20, 213, 244, 202, 4, 37, 221, 77, 16, 241, 218, 76, 162, 99, 60, 77, 65, 56, 226, 48, 110, 26, 47, 6, 77, 244, 28, 128, 50, 66, 111, 72, 5, 128, 216, 160, 4, 18, 186, 1, 23, 197, 79, 254, 75, 17, 145, 207, 159, 140, 124, 113, 82, 222, 79, 250, 165, 237, 125, 15, 9, 93, 26, 206, 130, 145, 70, 34, 138, 155, 72, 46, 125, 225, 24, 169, 202, 49, 186, 59, 99, 76, 224, 165, 198, 253, 246, 39, 49, 222, 251, 22, 149, 171, 247, 185, 171, 129, 124, 186, 202, 111, 69, 4, 68, 77, 244, 113, 197, 165, 47, 116, 50, 66, 172, 188, 125, 116, 8, 132, 154, 31, 240, 172, 160, 50, 153, 209, 233, 95, 254, 73, 180, 0, 112, 243, 7, 219, 97, 120, 8, 133, 98, 139, 174, 135, 227, 83, 255, 59, 60, 54, 121, 247, 31, 171, 126, 152, 99, 17, 179, 34, 136, 101, 167, 230, 191, 50, 209, 184, 181, 161, 18, 143, 123, 21, 189, 101, 254, 25, 78, 70, 210, 173, 34, 199, 207, 188, 224, 197, 116, 111, 120, 80, 196, 230, 253, 252, 227, 199, 199, 177, 129, 71, 134, 155, 36, 233, 124, 10, 237, 25, 153, 74, 195, 109, 80, 218, 67, 224, 22, 3, 81, 12, 67, 69, 41, 194, 202, 149, 24, 193, 130, 54, 82, 157, 196, 139, 39, 135, 163, 230, 64, 213, 215, 91, 213, 45, 140, 87, 149, 34, 184, 3, 177, 195, 95, 117, 3, 64, 114, 97, 31, 230, 242, 44, 150, 99, 248, 38, 168, 197, 179, 188, 60, 48, 195, 124, 52, 232, 112, 251, 53, 114, 0, 245, 8, 127, 132, 142, 61, 79, 135, 231, 20, 65, 198, 89, 227, 170, 196, 113, 53, 102, 175, 207, 111, 252, 198, 129, 0, 227, 64, 27, 207, 118, 43, 172, 230, 253, 36, 23, 222, 105, 232, 88, 62, 204, 167, 251, 105, 105, 152, 138, 35, 254, 197, 207, 195, 48, 133, 11, 185, 3, 141, 90, 15, 108, 23, 158, 22, 26, 115, 230, 134, 173, 146, 203, 126, 86, 145, 163, 85, 202, 23, 150, 74, 182, 247, 208, 176, 92, 232, 181, 119, 24, 94, 218, 219, 141, 73, 209, 180, 9, 228, 79, 246, 178, 3, 118, 108, 250, 81, 109, 159, 226, 182, 238, 236, 246, 15, 88, 116, 70, 237, 185, 49, 189, 110, 109, 78, 183, 239, 240, 12, 192, 238, 76, 229, 200, 160, 152, 178, 129, 100, 182, 11, 123, 22, 149, 98, 112, 238, 228, 125, 241, 92, 110, 28, 43, 29, 56, 67, 150, 39, 180, 10, 96, 97, 222, 243, 105, 8, 35, 86, 119, 166, 242, 225, 54, 174, 181, 167, 217, 10, 222, 201, 10, 114, 27, 99, 128, 48, 186, 170, 104, 84, 27, 90, 176, 171, 170, 26, 55, 161, 248, 104, 202, 142, 5, 74, 106, 140, 229, 124, 103, 144, 105, 139, 73, 234, 0, 238, 70, 123, 115, 57, 77, 121, 237, 35, 138, 152, 49, 138, 4, 155, 111, 56, 18, 117, 254, 123, 108, 208, 248, 243, 74, 62, 67, 215, 234, 144, 16, 197, 171, 187, 212, 187, 46, 190, 27, 81, 161, 226, 192, 210, 91, 90, 120, 204, 33, 49, 121, 211, 236, 132, 130, 117, 130, 127, 239, 14, 54, 21, 57, 250, 135, 107, 223, 72, 199, 179, 10, 83, 90, 172, 218, 137, 16, 38, 152, 239, 198, 118, 182, 184, 22, 61, 216, 39, 57, 94, 56, 174, 207, 12, 27, 140, 169, 197, 74, 239, 123, 47, 4, 109, 39, 38, 120, 64, 169, 248, 101, 92, 230, 255, 72, 191, 94, 128, 227, 73, 146, 183, 15, 105, 122, 91, 131, 78, 144, 77, 224, 74, 219, 169, 116, 150, 114, 73, 144, 240, 196, 152, 125, 65, 248, 220, 199, 208, 195, 92, 46, 40, 226, 0, 92, 195, 32, 154, 242, 204, 162, 42, 175, 91, 23, 27, 128, 61, 139, 177, 76, 20, 239, 243, 133, 250, 57, 205, 113, 158, 147, 179, 138, 51, 31, 183, 104, 219, 76, 176, 118, 215, 87, 196, 77, 154, 232, 33, 41, 220, 92, 138, 69, 18, 16, 25, 57, 238, 123, 98, 137, 82, 41, 84, 57, 239, 159, 124, 60, 95, 179, 165, 241, 218, 58, 116, 189, 43, 166, 235, 17, 24, 164, 148, 65, 9, 110, 120, 35, 6, 126, 121, 95, 233, 38, 36, 173, 3, 139, 93, 250, 108, 229, 201, 41, 183, 152, 106, 215, 155, 92, 14, 71, 144, 81, 113, 173, 149, 18, 48, 129, 38, 89, 53, 225, 57, 69, 8, 179, 22, 198, 185, 159, 72, 240, 165, 50, 218, 107, 137, 112, 3, 161, 135, 169, 112, 50, 207, 152, 180, 118, 24, 240, 91, 220, 212, 19, 176, 232, 239, 114, 144, 182, 192, 212, 162, 110, 254, 160, 172, 63, 211, 41, 137, 191, 125, 133, 209, 139, 112, 7, 117, 111, 254, 159, 174, 201, 68, 108, 27, 145, 130, 242, 124, 23, 223, 76, 224, 178, 7, 2, 51, 47, 235, 117, 163, 239, 103, 155, 95, 79, 65, 36, 119, 232, 252 },
                            BirthDate = new DateTimeOffset(new DateTime(1987, 1, 3, 16, 35, 4, 226, DateTimeKind.Unspecified).AddTicks(5586), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Carol",
                            HireDate = new DateTimeOffset(new DateTime(2021, 7, 17, 15, 21, 33, 599, DateTimeKind.Unspecified).AddTicks(7903), new TimeSpan(0, 3, 0, 0, 0)),
                            LastName = "Pouros",
                            PhoneNumber = "(560) 984-6381 x01182",
                            TeamId = 3,
                            UserId = 17
                        },
                        new
                        {
                            Id = 18,
                            Avatar = new byte[] { 30, 132, 110, 211, 69, 132, 137, 252, 191, 98, 169, 12, 204, 80, 93, 122, 148, 26, 190, 148, 191, 140, 45, 216, 160, 171, 209, 183, 194, 65, 245, 187, 46, 170, 34, 159, 9, 20, 182, 156, 46, 36, 103, 119, 127, 133, 183, 202, 95, 102, 25, 87, 33, 155, 229, 145, 86, 149, 51, 154, 178, 209, 57, 125, 109, 238, 222, 34, 45, 190, 112, 127, 99, 34, 102, 154, 37, 182, 89, 27, 243, 7, 88, 91, 40, 157, 154, 146, 196, 145, 72, 115, 224, 28, 234, 93, 235, 233, 9, 145, 167, 148, 156, 161, 245, 153, 244, 254, 53, 75, 108, 160, 60, 24, 166, 171, 120, 222, 85, 207, 84, 75, 94, 156, 117, 253, 158, 70, 56, 8, 174, 60, 172, 199, 115, 95, 106, 183, 101, 142, 168, 155, 93, 120, 36, 168, 55, 200, 117, 63, 228, 13, 147, 58, 60, 92, 54, 0, 43, 248, 250, 173, 198, 44, 156, 48, 243, 116, 164, 71, 64, 193, 120, 199, 39, 185, 237, 229, 119, 205, 197, 214, 209, 249, 36, 161, 168, 114, 138, 22, 40, 106, 140, 108, 147, 251, 212, 48, 219, 244, 181, 194, 36, 45, 254, 34, 149, 204, 18, 131, 110, 80, 136, 94, 51, 36, 220, 205, 8, 251, 135, 128, 233, 141, 31, 214, 53, 11, 51, 44, 228, 189, 10, 131, 23, 2, 177, 163, 250, 1, 12, 219, 95, 7, 168, 215, 225, 45, 57, 111, 30, 6, 40, 224, 108, 52, 217, 150, 14, 39, 237, 137, 153, 230, 158, 176, 70, 5, 70, 48, 115, 56, 211, 6, 238, 172, 32, 226, 229, 71, 245, 7, 209, 195, 13, 222, 149, 41, 22, 227, 41, 26, 148, 210, 20, 131, 66, 121, 104, 247, 145, 219, 231, 8, 252, 229, 51, 33, 241, 192, 20, 246, 177, 199, 50, 230, 183, 213, 217, 192, 27, 29, 238, 99, 6, 88, 164, 0, 241, 107, 105, 167, 122, 237, 182, 25, 31, 201, 199, 39, 170, 115, 55, 86, 206, 50, 104, 205, 159, 46, 203, 108, 160, 167, 220, 116, 237, 131, 1, 163, 65, 51, 48, 134, 86, 108, 124, 196, 17, 25, 198, 238, 13, 177, 22, 167, 229, 152, 148, 212, 239, 215, 96, 195, 160, 252, 7, 210, 17, 65, 43, 155, 199, 35, 230, 119, 67, 177, 0, 98, 182, 164, 187, 134, 103, 220, 95, 238, 145, 53, 143, 85, 239, 45, 180, 106, 210, 108, 229, 89, 101, 170, 179, 207, 237, 42, 39, 233, 203, 159, 99, 51, 151, 50, 30, 74, 27, 218, 92, 195, 157, 24, 65, 219, 178, 214, 172, 153, 111, 123, 164, 215, 203, 166, 252, 12, 241, 236, 152, 60, 181, 117, 34, 242, 210, 91, 189, 189, 15, 105, 78, 247, 16, 34, 187, 76, 104, 215, 28, 23, 126, 142, 122, 79, 250, 139, 104, 241, 53, 17, 88, 47, 66, 31, 14, 40, 246, 79, 9, 87, 25, 239, 137, 5, 45, 173, 199, 169, 235, 175, 163, 26, 207, 129, 190, 39, 250, 211, 247, 70, 243, 204, 135, 253, 17, 30, 181, 240, 20, 147, 86, 24, 205, 197, 254, 143, 4, 117, 34, 76, 196, 191, 6, 133, 110, 62, 96, 193, 96, 230, 45, 34, 87, 195, 100, 76, 103, 139, 244, 14, 247, 214, 148, 87, 89, 138, 76, 9, 131, 47, 34, 133, 177, 171, 129, 52, 198, 1, 143, 210, 190, 243, 143, 45, 101, 51, 193, 10, 97, 177, 39, 121, 128, 19, 85, 237, 42, 174, 44, 227, 242, 86, 62, 49, 196, 168, 113, 172, 65, 48, 134, 102, 252, 33, 79, 3, 71, 103, 242, 37, 201, 65, 168, 209, 8, 169, 4, 157, 85, 148, 9, 23, 212, 171, 224, 104, 181, 94, 104, 189, 194, 20, 201, 48, 42, 193, 124, 95, 195, 81, 166, 195, 187, 7, 26, 176, 173, 108, 41, 27, 163, 212, 86, 173, 38, 110, 145, 80, 65, 231, 78, 232, 254, 52, 98, 180, 120, 119, 167, 71, 44, 165, 217, 4, 238, 70, 92, 205, 145, 47, 186, 73, 53, 77, 26, 238, 190, 28, 10, 187, 47, 44, 30, 220, 3, 189, 197, 134, 164, 101, 55, 53, 197, 226, 239, 254, 250, 81, 191, 224, 18, 195, 190, 17, 44, 4, 179, 176, 26, 116, 246, 92, 109, 235, 23, 255, 135, 253, 1, 48, 128, 213, 40, 44, 247, 132, 132, 83, 93, 27, 243, 108, 92, 41, 168, 108, 110, 12, 175, 254, 9, 20, 108, 48, 110, 219, 200, 217, 202, 239, 118, 252, 80, 142, 95, 61, 155, 145, 25, 168, 128, 96, 82, 254, 128, 138, 255, 67, 66, 171, 145, 122, 78, 3, 38, 108, 104, 248, 189, 28, 188, 170, 136, 110, 165, 246, 28, 206, 201, 107, 209, 220, 242, 7, 125, 169, 193, 109, 175, 228, 219, 132, 150, 31, 94, 252, 174, 76, 103, 243, 212, 162, 212, 253, 235, 213, 215, 228, 89, 137, 110, 49, 121, 215, 218, 181, 135, 70, 134, 124, 170, 251, 73, 217, 64, 56, 20, 104, 15, 168, 72, 207, 102, 214, 150, 46, 7, 245, 27, 167, 209, 220, 19, 37, 118, 170, 10, 190, 69, 169, 116, 103, 198, 234, 72, 217, 89, 251, 188, 179, 193, 111, 212, 176, 65, 158, 202, 163, 65, 171, 173, 146, 42, 222, 171, 206, 232, 35, 98, 149, 45, 86, 35, 102, 52, 224, 9, 123, 141, 189, 213, 12, 56, 104, 230, 98, 7, 98, 228, 216, 224, 103, 125, 153, 252, 226, 60, 231, 63, 122, 241, 53, 152, 38, 133, 107, 75, 110, 124, 97, 148, 78, 21, 132, 214, 160, 89, 194, 248, 72, 198, 133, 63, 138, 181, 198, 217, 137, 106, 82, 163, 34, 60, 19, 203, 159, 116, 18, 227, 123, 22, 153, 230, 130, 67, 145, 81, 248, 195, 92, 136, 122, 238, 246, 180, 107, 246, 13, 112, 191 },
                            BirthDate = new DateTimeOffset(new DateTime(1986, 7, 17, 2, 40, 43, 497, DateTimeKind.Unspecified).AddTicks(707), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Brent",
                            HireDate = new DateTimeOffset(new DateTime(2024, 5, 12, 1, 51, 51, 983, DateTimeKind.Unspecified).AddTicks(5032), new TimeSpan(0, 3, 0, 0, 0)),
                            LastName = "Fahey",
                            PhoneNumber = "1-452-433-0500",
                            TeamId = 10,
                            UserId = 18
                        },
                        new
                        {
                            Id = 19,
                            Avatar = new byte[] { 116, 224, 197, 14, 201, 40, 51, 69, 95, 95, 168, 103, 161, 35, 232, 84, 149, 188, 196, 208, 126, 79, 64, 141, 48, 65, 156, 113, 196, 135, 205, 57, 197, 76, 75, 177, 252, 245, 95, 149, 63, 205, 163, 88, 141, 196, 165, 187, 148, 221, 151, 226, 248, 119, 166, 36, 160, 56, 221, 136, 140, 193, 128, 215, 146, 110, 161, 85, 216, 55, 87, 159, 92, 46, 144, 176, 172, 231, 255, 108, 155, 224, 220, 231, 239, 235, 65, 78, 166, 39, 17, 196, 24, 215, 9, 125, 77, 203, 198, 30, 34, 80, 226, 93, 133, 247, 133, 201, 230, 245, 119, 184, 56, 112, 237, 171, 229, 152, 231, 167, 45, 83, 174, 176, 37, 147, 135, 133, 37, 18, 99, 225, 33, 225, 74, 74, 254, 126, 98, 247, 102, 120, 103, 177, 175, 88, 139, 167, 233, 93, 152, 180, 227, 30, 241, 206, 162, 49, 56, 241, 112, 255, 163, 212, 145, 150, 151, 87, 38, 162, 173, 102, 54, 239, 65, 180, 236, 253, 1, 204, 7, 223, 155, 199, 122, 174, 253, 2, 239, 123, 168, 204, 70, 112, 135, 102, 213, 147, 31, 25, 192, 52, 128, 71, 176, 49, 126, 243, 221, 61, 226, 164, 48, 107, 234, 145, 100, 219, 90, 226, 152, 149, 103, 171, 250, 225, 32, 197, 104, 218, 223, 88, 222, 231, 12, 211, 94, 84, 23, 72, 48, 10, 36, 178, 152, 3, 155, 219, 134, 245, 2, 249, 57, 60, 129, 43, 204, 213, 76, 206, 17, 185, 138, 2, 93, 137, 197, 72, 95, 22, 50, 15, 195, 17, 178, 141, 112, 181, 18, 246, 70, 68, 62, 115, 216, 230, 31, 161, 102, 224, 6, 136, 8, 72, 54, 118, 127, 34, 84, 14, 61, 82, 123, 111, 195, 242, 53, 39, 138, 243, 187, 22, 195, 85, 136, 205, 122, 23, 42, 119, 106, 36, 226, 126, 16, 169, 7, 122, 219, 59, 13, 78, 96, 4, 184, 243, 200, 206, 175, 229, 176, 248, 23, 115, 37, 239, 197, 178, 192, 105, 252, 104, 247, 221, 164, 25, 111, 252, 95, 25, 235, 186, 76, 78, 229, 108, 182, 190, 156, 148, 4, 172, 103, 68, 199, 113, 12, 111, 89, 32, 227, 84, 186, 113, 63, 165, 86, 131, 95, 159, 131, 203, 111, 149, 249, 246, 172, 200, 141, 184, 57, 7, 21, 43, 101, 80, 0, 178, 22, 50, 12, 0, 163, 63, 54, 150, 255, 218, 15, 64, 22, 50, 95, 253, 17, 56, 61, 209, 75, 208, 197, 67, 225, 161, 230, 220, 63, 143, 12, 239, 164, 163, 109, 44, 146, 131, 40, 47, 95, 99, 246, 209, 185, 77, 162, 7, 167, 24, 26, 45, 19, 47, 103, 69, 109, 200, 30, 2, 88, 89, 87, 112, 206, 31, 156, 114, 196, 50, 106, 142, 15, 13, 114, 231, 218, 244, 138, 148, 254, 223, 52, 38, 117, 222, 220, 117, 59, 40, 191, 201, 100, 38, 214, 5, 11, 134, 2, 154, 176, 47, 66, 117, 173, 139, 29, 5, 188, 127, 106, 120, 62, 138, 3, 121, 37, 48, 250, 239, 67, 38, 54, 156, 114, 161, 41, 232, 54, 108, 220, 84, 241, 239, 227, 207, 156, 191, 121, 233, 192, 214, 184, 188, 190, 70, 138, 218, 35, 93, 224, 218, 139, 18, 87, 138, 249, 166, 3, 12, 98, 52, 207, 80, 163, 21, 135, 79, 166, 51, 220, 101, 183, 16, 46, 108, 110, 122, 222, 43, 22, 79, 197, 216, 139, 1, 200, 222, 152, 89, 214, 246, 188, 109, 135, 139, 7, 103, 24, 168, 191, 59, 51, 239, 129, 122, 35, 122, 228, 234, 27, 126, 200, 215, 245, 18, 111, 246, 196, 162, 77, 168, 182, 76, 93, 229, 169, 74, 137, 162, 101, 6, 98, 53, 108, 218, 27, 214, 87, 16, 221, 78, 250, 174, 61, 87, 46, 228, 119, 117, 28, 16, 163, 117, 91, 22, 133, 231, 145, 155, 209, 217, 241, 65, 133, 21, 28, 146, 107, 26, 246, 153, 158, 180, 196, 254, 174, 8, 14, 6, 183, 196, 211, 20, 134, 84, 99, 236, 218, 85, 85, 52, 68, 188, 63, 4, 93, 185, 40, 40, 59, 155, 121, 92, 126, 131, 114, 238, 176, 92, 104, 125, 216, 139, 227, 12, 5, 220, 186, 49, 178, 47, 183, 21, 196, 194, 84, 226, 116, 192, 161, 244, 223, 230, 202, 27, 75, 118, 150, 3, 226, 116, 59, 126, 236, 216, 91, 184, 217, 50, 254, 128, 254, 247, 118, 11, 227, 99, 151, 187, 46, 143, 121, 240, 186, 115, 158, 242, 193, 199, 193, 143, 70, 183, 79, 61, 244, 57, 40, 236, 102, 156, 9, 66, 193, 33, 245, 231, 112, 191, 56, 231, 222, 218, 212, 82, 250, 74, 196, 121, 58, 105, 247, 17, 113, 111, 57, 71, 168, 56, 23, 170, 59, 171, 85, 146, 134, 55, 47, 152, 126, 182, 129, 1, 143, 217, 176, 108, 226, 252, 67, 169, 117, 175, 178, 253, 164, 247, 208, 82, 232, 174, 62, 56, 167, 141, 172, 51, 132, 66, 203, 194, 27, 43, 250, 131, 231, 245, 130, 151, 190, 204, 101, 171, 244, 109, 53, 139, 249, 88, 237, 143, 103, 221, 176, 208, 119, 73, 90, 1, 45, 124, 231, 159, 48, 128, 141, 73, 181, 46, 21, 174, 117, 56, 147, 27, 72, 146, 67, 57, 88, 32, 58, 44, 85, 60, 91, 62, 122, 42, 11, 157, 155, 128, 106, 66, 229, 197, 122, 116, 224, 235, 214, 202, 66, 62, 26, 46, 73, 148, 135, 228, 6, 32, 169, 12, 66, 186, 73, 244, 37, 79, 207, 138, 34, 119, 19, 244, 206, 81, 54, 130, 23, 206, 89, 108, 74, 111, 233, 22, 34, 45, 244, 229, 163, 39, 151, 123, 214, 93, 255, 42, 123, 134, 79, 144, 28, 75, 168, 203, 43, 37, 96, 248, 94, 4, 205, 56, 198, 61, 194, 210 },
                            BirthDate = new DateTimeOffset(new DateTime(1980, 9, 15, 17, 10, 42, 876, DateTimeKind.Unspecified).AddTicks(2938), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Dayton",
                            HireDate = new DateTimeOffset(new DateTime(2020, 8, 27, 7, 32, 55, 377, DateTimeKind.Unspecified).AddTicks(2591), new TimeSpan(0, 3, 0, 0, 0)),
                            LastName = "Brown",
                            PhoneNumber = "382.955.3275 x8876",
                            TeamId = 6,
                            UserId = 19
                        },
                        new
                        {
                            Id = 20,
                            Avatar = new byte[] { 127, 201, 79, 254, 199, 30, 235, 253, 204, 251, 135, 158, 89, 95, 180, 152, 155, 45, 89, 72, 180, 87, 53, 51, 100, 173, 235, 147, 6, 239, 167, 82, 253, 59, 184, 253, 237, 195, 11, 178, 71, 212, 43, 95, 97, 72, 161, 128, 226, 133, 213, 35, 179, 190, 221, 40, 147, 28, 153, 25, 51, 87, 246, 221, 84, 53, 161, 30, 166, 183, 171, 215, 34, 166, 0, 223, 44, 214, 209, 28, 12, 106, 176, 129, 25, 131, 158, 62, 94, 144, 105, 208, 41, 241, 127, 240, 222, 77, 10, 44, 167, 130, 218, 43, 218, 253, 1, 12, 189, 253, 252, 189, 74, 125, 13, 200, 166, 117, 196, 209, 150, 98, 191, 22, 78, 218, 174, 48, 39, 16, 1, 222, 204, 165, 116, 137, 144, 133, 167, 27, 129, 146, 128, 97, 147, 171, 134, 171, 228, 182, 73, 104, 137, 57, 149, 68, 195, 195, 220, 255, 79, 209, 229, 173, 251, 29, 241, 165, 9, 132, 56, 33, 206, 168, 79, 4, 225, 94, 130, 162, 84, 2, 76, 112, 199, 153, 85, 147, 15, 48, 197, 204, 168, 167, 204, 175, 173, 211, 101, 118, 186, 224, 162, 95, 126, 39, 154, 225, 233, 145, 98, 100, 65, 57, 171, 77, 133, 116, 230, 98, 199, 94, 150, 216, 190, 108, 120, 38, 219, 159, 87, 14, 248, 11, 232, 115, 95, 236, 242, 159, 254, 116, 169, 125, 205, 97, 138, 111, 252, 127, 42, 56, 237, 3, 174, 91, 74, 202, 160, 17, 175, 115, 5, 73, 58, 84, 108, 53, 81, 55, 237, 152, 130, 71, 99, 83, 180, 24, 10, 93, 225, 9, 42, 92, 117, 30, 33, 245, 93, 140, 41, 149, 75, 224, 239, 139, 110, 95, 66, 121, 244, 85, 29, 196, 145, 145, 181, 165, 159, 90, 167, 49, 191, 67, 48, 165, 72, 168, 212, 27, 51, 119, 216, 196, 13, 87, 77, 162, 87, 216, 228, 84, 213, 145, 104, 140, 235, 102, 203, 227, 105, 123, 85, 2, 229, 248, 214, 8, 175, 74, 66, 198, 139, 39, 70, 125, 125, 88, 182, 57, 68, 18, 78, 199, 118, 82, 91, 46, 219, 164, 185, 226, 221, 240, 178, 183, 33, 213, 223, 21, 129, 69, 242, 12, 149, 30, 201, 174, 74, 234, 15, 146, 175, 145, 159, 86, 44, 142, 140, 146, 156, 167, 44, 11, 144, 96, 232, 154, 117, 142, 92, 167, 121, 161, 183, 254, 31, 65, 49, 87, 136, 173, 227, 240, 149, 38, 50, 76, 81, 91, 139, 147, 73, 76, 120, 218, 24, 231, 124, 52, 54, 46, 57, 188, 142, 103, 25, 13, 217, 160, 54, 234, 92, 52, 9, 239, 195, 60, 118, 105, 45, 156, 73, 25, 3, 201, 94, 45, 41, 221, 230, 56, 197, 252, 33, 90, 115, 39, 98, 45, 13, 37, 115, 176, 36, 160, 54, 20, 66, 136, 22, 220, 112, 18, 7, 154, 229, 31, 185, 196, 8, 236, 227, 251, 185, 254, 36, 96, 19, 175, 123, 156, 217, 72, 92, 8, 40, 152, 245, 98, 146, 74, 234, 161, 199, 10, 200, 179, 245, 134, 117, 84, 110, 157, 36, 33, 65, 119, 246, 38, 123, 214, 0, 146, 12, 121, 2, 39, 182, 254, 113, 76, 42, 86, 50, 190, 1, 66, 52, 175, 53, 113, 106, 140, 58, 39, 46, 59, 35, 58, 198, 177, 161, 207, 230, 188, 73, 87, 148, 77, 7, 160, 253, 247, 21, 40, 42, 23, 107, 102, 31, 255, 66, 71, 240, 10, 107, 115, 88, 228, 75, 198, 3, 123, 55, 191, 171, 90, 112, 117, 116, 170, 173, 230, 167, 149, 115, 115, 119, 18, 253, 22, 208, 189, 27, 199, 110, 90, 222, 219, 80, 214, 255, 176, 1, 65, 156, 130, 191, 86, 125, 207, 167, 246, 241, 117, 82, 92, 159, 91, 150, 248, 252, 70, 231, 53, 246, 70, 95, 111, 80, 80, 124, 148, 36, 158, 170, 253, 229, 102, 248, 241, 179, 33, 148, 45, 110, 217, 204, 165, 117, 18, 186, 131, 69, 88, 217, 184, 200, 204, 74, 86, 34, 79, 5, 44, 83, 19, 209, 82, 202, 84, 118, 57, 98, 165, 68, 219, 177, 185, 198, 28, 122, 186, 250, 62, 150, 249, 78, 203, 196, 242, 52, 25, 27, 162, 207, 100, 27, 104, 218, 91, 8, 121, 218, 32, 156, 129, 32, 159, 20, 254, 7, 14, 5, 46, 220, 103, 85, 199, 149, 89, 196, 5, 141, 216, 32, 93, 29, 192, 214, 223, 191, 73, 223, 106, 20, 0, 223, 217, 162, 21, 216, 174, 183, 198, 234, 37, 19, 237, 197, 103, 14, 84, 210, 128, 151, 2, 235, 1, 0, 62, 99, 96, 201, 52, 63, 189, 47, 155, 26, 219, 136, 123, 36, 128, 129, 21, 78, 199, 237, 250, 74, 48, 250, 111, 209, 106, 118, 94, 211, 17, 20, 221, 217, 99, 177, 120, 229, 130, 135, 45, 246, 120, 211, 233, 222, 147, 47, 81, 255, 129, 180, 36, 19, 5, 244, 51, 101, 90, 99, 213, 70, 209, 199, 9, 199, 170, 162, 193, 207, 9, 48, 203, 64, 192, 4, 209, 93, 17, 144, 61, 58, 37, 95, 82, 92, 240, 201, 211, 111, 126, 18, 138, 31, 178, 230, 36, 176, 201, 34, 52, 241, 110, 130, 245, 81, 233, 227, 83, 1, 34, 213, 84, 202, 37, 154, 33, 114, 117, 172, 214, 224, 206, 82, 81, 246, 166, 171, 142, 218, 223, 33, 147, 238, 91, 76, 203, 163, 105, 0, 114, 13, 118, 210, 76, 168, 190, 191, 249, 23, 196, 178, 59, 29, 76, 84, 34, 28, 48, 254, 171, 61, 85, 120, 33, 1, 66, 101, 111, 217, 206, 126, 8, 116, 57, 201, 105, 252, 5, 169, 56, 230, 178, 119, 21, 45, 229, 118, 162, 7, 42, 175, 114, 106, 85, 53, 183, 254, 176, 75, 101, 89, 80, 32, 72, 70, 170, 199, 227 },
                            BirthDate = new DateTimeOffset(new DateTime(2001, 8, 7, 7, 14, 16, 467, DateTimeKind.Unspecified).AddTicks(4204), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Coy",
                            HireDate = new DateTimeOffset(new DateTime(2024, 12, 4, 8, 27, 10, 152, DateTimeKind.Unspecified).AddTicks(3739), new TimeSpan(0, 2, 0, 0, 0)),
                            LastName = "Abbott",
                            PhoneNumber = "(932) 318-4833",
                            TeamId = 5,
                            UserId = 20
                        });
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.EmployeeClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("MinScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("RecommendedActions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassName")
                        .IsUnique();

                    b.ToTable("EmployeeClasses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassName = "A",
                            Description = "High level of professionalism, consistently high results, positive impact on the team and processes.",
                            MaxScore = 10.00m,
                            MinScore = 8.50m,
                            RecommendedActions = "[\"- Involve in mentoring newcomers\",\"- Assign more complex or strategic tasks\",\"- Suggest development towards technical leadership or architecture\"]"
                        },
                        new
                        {
                            Id = 2,
                            ClassName = "B",
                            Description = "Confidently performs tasks, demonstrates good results, may require minor adjustments in certain aspects.",
                            MaxScore = 8.49m,
                            MinScore = 7.00m,
                            RecommendedActions = "[\"- Maintain the current level\",\"- Identify 1-2 areas for development (soft skills or technical competencies)\",\"- Encourage participation in team processes (code review, technical discussions)\"]"
                        },
                        new
                        {
                            Id = 3,
                            ClassName = "C",
                            Description = "Generally copes with the work, but there are noticeable areas for improvement. Requires attention from the manager or mentor.",
                            MaxScore = 6.99m,
                            MinScore = 5.50m,
                            RecommendedActions = "[\"- Regular feedback with clear examples\",\"- Recommend internal training\",\"- Involve in pair programming or group work to increase efficiency\"]"
                        },
                        new
                        {
                            Id = 4,
                            ClassName = "D",
                            Description = "Significant difficulties in performing tasks, often requires help, insufficient quality or speed of work.",
                            MaxScore = 5.49m,
                            MinScore = 4.00m,
                            RecommendedActions = "[\"- Develop a development plan with specific goals and deadlines\",\"- Assign a mentor\",\"- Control the quality of completed work with regular feedback\"]"
                        },
                        new
                        {
                            Id = 5,
                            ClassName = "E",
                            Description = "Work does not meet expectations, serious problems with quality, communication, or professional skills.",
                            MaxScore = 3.99m,
                            MinScore = 1.00m,
                            RecommendedActions = "[\"- Immediate conversation with the manager about the future in the company\",\"- Creating an individual improvement plan\",\"- Control results within 1-3 months with recording of progress or regression\"]"
                        });
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EvaluationSessionId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int");

                    b.Property<int>("KpiId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationSessionId");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("RoleId", "KpiId");

                    b.ToTable("Evaluations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "In molestias et dolores et provident ad.",
                            EvaluationSessionId = 1,
                            EvaluatorId = 12,
                            KpiId = 7,
                            RoleId = 5,
                            Score = 4
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Aut est ea commodi quae at nobis neque.",
                            EvaluationSessionId = 1,
                            EvaluatorId = 2,
                            KpiId = 3,
                            RoleId = 6,
                            Score = 5
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Error autem consequatur ut rerum.",
                            EvaluationSessionId = 1,
                            EvaluatorId = 4,
                            KpiId = 2,
                            RoleId = 3,
                            Score = 5
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Laudantium quae voluptates qui numquam.",
                            EvaluationSessionId = 1,
                            EvaluatorId = 9,
                            KpiId = 5,
                            RoleId = 2,
                            Score = 2
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Quam ullam iure qui doloremque rem placeat dolores deserunt.",
                            EvaluationSessionId = 2,
                            EvaluatorId = 15,
                            KpiId = 2,
                            RoleId = 6,
                            Score = 1
                        },
                        new
                        {
                            Id = 6,
                            Comment = "Dolore repellat ducimus maiores libero accusamus dolorem reprehenderit nulla.",
                            EvaluationSessionId = 2,
                            EvaluatorId = 3,
                            KpiId = 3,
                            RoleId = 2,
                            Score = 4
                        },
                        new
                        {
                            Id = 7,
                            Comment = "Placeat sed quasi magnam corporis beatae sint voluptatem praesentium qui.",
                            EvaluationSessionId = 2,
                            EvaluatorId = 11,
                            KpiId = 6,
                            RoleId = 6,
                            Score = 2
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Vitae inventore eos laudantium enim ut modi.",
                            EvaluationSessionId = 3,
                            EvaluatorId = 6,
                            KpiId = 8,
                            RoleId = 5,
                            Score = 4
                        },
                        new
                        {
                            Id = 9,
                            Comment = "Eum recusandae libero.",
                            EvaluationSessionId = 3,
                            EvaluatorId = 17,
                            KpiId = 2,
                            RoleId = 6,
                            Score = 2
                        },
                        new
                        {
                            Id = 10,
                            Comment = "Quisquam perspiciatis consequatur explicabo eveniet est deserunt debitis sint.",
                            EvaluationSessionId = 3,
                            EvaluatorId = 12,
                            KpiId = 2,
                            RoleId = 3,
                            Score = 5
                        },
                        new
                        {
                            Id = 11,
                            Comment = "Voluptatem explicabo numquam tempora eos quo hic.",
                            EvaluationSessionId = 3,
                            EvaluatorId = 7,
                            KpiId = 3,
                            RoleId = 6,
                            Score = 1
                        },
                        new
                        {
                            Id = 12,
                            Comment = "Mollitia aperiam qui aliquam dolorem itaque qui cupiditate ea ut.",
                            EvaluationSessionId = 4,
                            EvaluatorId = 15,
                            KpiId = 5,
                            RoleId = 2,
                            Score = 5
                        },
                        new
                        {
                            Id = 13,
                            Comment = "Autem laudantium sapiente beatae nihil aliquid impedit itaque maiores et.",
                            EvaluationSessionId = 4,
                            EvaluatorId = 7,
                            KpiId = 2,
                            RoleId = 3,
                            Score = 3
                        },
                        new
                        {
                            Id = 14,
                            Comment = "Et sunt architecto voluptatum quod assumenda.",
                            EvaluationSessionId = 5,
                            EvaluatorId = 2,
                            KpiId = 2,
                            RoleId = 6,
                            Score = 3
                        },
                        new
                        {
                            Id = 15,
                            Comment = "Dicta fugiat eum et.",
                            EvaluationSessionId = 5,
                            EvaluatorId = 2,
                            KpiId = 5,
                            RoleId = 2,
                            Score = 5
                        },
                        new
                        {
                            Id = 16,
                            Comment = "Suscipit harum quidem laudantium vel et.",
                            EvaluationSessionId = 6,
                            EvaluatorId = 3,
                            KpiId = 2,
                            RoleId = 6,
                            Score = 3
                        },
                        new
                        {
                            Id = 17,
                            Comment = "Autem voluptas eligendi non eos qui ex.",
                            EvaluationSessionId = 6,
                            EvaluatorId = 15,
                            KpiId = 6,
                            RoleId = 6,
                            Score = 2
                        },
                        new
                        {
                            Id = 18,
                            Comment = "Temporibus officiis et.",
                            EvaluationSessionId = 6,
                            EvaluatorId = 20,
                            KpiId = 2,
                            RoleId = 2,
                            Score = 1
                        },
                        new
                        {
                            Id = 19,
                            Comment = "Delectus laboriosam dolores ipsum similique dolor est velit illum ad.",
                            EvaluationSessionId = 6,
                            EvaluatorId = 14,
                            KpiId = 8,
                            RoleId = 5,
                            Score = 1
                        },
                        new
                        {
                            Id = 20,
                            Comment = "Et error enim aperiam et.",
                            EvaluationSessionId = 7,
                            EvaluatorId = 7,
                            KpiId = 3,
                            RoleId = 2,
                            Score = 5
                        },
                        new
                        {
                            Id = 21,
                            Comment = "Temporibus necessitatibus voluptas molestias deleniti et.",
                            EvaluationSessionId = 7,
                            EvaluatorId = 10,
                            KpiId = 5,
                            RoleId = 2,
                            Score = 5
                        },
                        new
                        {
                            Id = 22,
                            Comment = "Quia facilis itaque suscipit.",
                            EvaluationSessionId = 8,
                            EvaluatorId = 2,
                            KpiId = 8,
                            RoleId = 5,
                            Score = 5
                        },
                        new
                        {
                            Id = 23,
                            Comment = "Facere blanditiis non ea deleniti aut.",
                            EvaluationSessionId = 8,
                            EvaluatorId = 4,
                            KpiId = 5,
                            RoleId = 2,
                            Score = 4
                        },
                        new
                        {
                            Id = 24,
                            Comment = "Sed laudantium quasi.",
                            EvaluationSessionId = 9,
                            EvaluatorId = 17,
                            KpiId = 6,
                            RoleId = 6,
                            Score = 1
                        },
                        new
                        {
                            Id = 25,
                            Comment = "Est incidunt eligendi aspernatur illo.",
                            EvaluationSessionId = 9,
                            EvaluatorId = 5,
                            KpiId = 2,
                            RoleId = 2,
                            Score = 5
                        },
                        new
                        {
                            Id = 26,
                            Comment = "Consequatur dolorem odit qui similique alias maiores aut.",
                            EvaluationSessionId = 10,
                            EvaluatorId = 8,
                            KpiId = 5,
                            RoleId = 2,
                            Score = 2
                        },
                        new
                        {
                            Id = 27,
                            Comment = "Atque aspernatur repellat repellat molestiae et.",
                            EvaluationSessionId = 10,
                            EvaluatorId = 7,
                            KpiId = 2,
                            RoleId = 6,
                            Score = 5
                        });
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.EvaluationSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EvaluationFinishedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("ReportFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("WeightedScore")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EvaluationSessions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassId = 4,
                            EmployeeId = 17,
                            EndDate = new DateTimeOffset(new DateTime(2024, 11, 4, 1, 58, 36, 794, DateTimeKind.Unspecified).AddTicks(9617), new TimeSpan(0, 2, 0, 0, 0)),
                            EvaluationFinishedDate = new DateTimeOffset(new DateTime(2023, 7, 21, 4, 7, 55, 497, DateTimeKind.Unspecified).AddTicks(27), new TimeSpan(0, 3, 0, 0, 0)),
                            ReportFile = new byte[0],
                            StartDate = new DateTimeOffset(new DateTime(2025, 1, 31, 15, 40, 39, 867, DateTimeKind.Unspecified).AddTicks(2357), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            ClassId = 4,
                            EmployeeId = 11,
                            EndDate = new DateTimeOffset(new DateTime(2024, 8, 7, 6, 59, 8, 855, DateTimeKind.Unspecified).AddTicks(3078), new TimeSpan(0, 3, 0, 0, 0)),
                            EvaluationFinishedDate = new DateTimeOffset(new DateTime(2023, 11, 7, 16, 2, 38, 895, DateTimeKind.Unspecified).AddTicks(9467), new TimeSpan(0, 2, 0, 0, 0)),
                            ReportFile = new byte[0],
                            StartDate = new DateTimeOffset(new DateTime(2024, 10, 6, 17, 47, 10, 605, DateTimeKind.Unspecified).AddTicks(4806), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            ClassId = 3,
                            EmployeeId = 19,
                            EndDate = new DateTimeOffset(new DateTime(2024, 5, 20, 23, 11, 25, 120, DateTimeKind.Unspecified).AddTicks(2112), new TimeSpan(0, 3, 0, 0, 0)),
                            EvaluationFinishedDate = new DateTimeOffset(new DateTime(2024, 2, 23, 3, 58, 33, 828, DateTimeKind.Unspecified).AddTicks(4200), new TimeSpan(0, 2, 0, 0, 0)),
                            ReportFile = new byte[0],
                            StartDate = new DateTimeOffset(new DateTime(2023, 11, 30, 0, 1, 45, 938, DateTimeKind.Unspecified).AddTicks(1861), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            ClassId = 4,
                            EmployeeId = 13,
                            EndDate = new DateTimeOffset(new DateTime(2024, 8, 29, 13, 58, 39, 951, DateTimeKind.Unspecified).AddTicks(3862), new TimeSpan(0, 3, 0, 0, 0)),
                            EvaluationFinishedDate = new DateTimeOffset(new DateTime(2023, 11, 27, 18, 21, 37, 28, DateTimeKind.Unspecified).AddTicks(6428), new TimeSpan(0, 2, 0, 0, 0)),
                            ReportFile = new byte[0],
                            StartDate = new DateTimeOffset(new DateTime(2023, 1, 18, 20, 43, 56, 846, DateTimeKind.Unspecified).AddTicks(1349), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            ClassId = 2,
                            EmployeeId = 12,
                            EndDate = new DateTimeOffset(new DateTime(2024, 7, 2, 20, 13, 1, 64, DateTimeKind.Unspecified).AddTicks(3715), new TimeSpan(0, 3, 0, 0, 0)),
                            EvaluationFinishedDate = new DateTimeOffset(new DateTime(2023, 10, 17, 9, 39, 15, 289, DateTimeKind.Unspecified).AddTicks(5581), new TimeSpan(0, 3, 0, 0, 0)),
                            ReportFile = new byte[0],
                            StartDate = new DateTimeOffset(new DateTime(2024, 11, 2, 15, 23, 59, 34, DateTimeKind.Unspecified).AddTicks(2667), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            ClassId = 5,
                            EmployeeId = 20,
                            EndDate = new DateTimeOffset(new DateTime(2024, 6, 25, 21, 59, 35, 613, DateTimeKind.Unspecified).AddTicks(6405), new TimeSpan(0, 3, 0, 0, 0)),
                            EvaluationFinishedDate = new DateTimeOffset(new DateTime(2023, 12, 30, 17, 33, 55, 359, DateTimeKind.Unspecified).AddTicks(3582), new TimeSpan(0, 2, 0, 0, 0)),
                            ReportFile = new byte[0],
                            StartDate = new DateTimeOffset(new DateTime(2023, 12, 27, 13, 59, 28, 123, DateTimeKind.Unspecified).AddTicks(3296), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            ClassId = 2,
                            EmployeeId = 18,
                            EndDate = new DateTimeOffset(new DateTime(2025, 3, 17, 0, 12, 4, 140, DateTimeKind.Unspecified).AddTicks(5314), new TimeSpan(0, 2, 0, 0, 0)),
                            EvaluationFinishedDate = new DateTimeOffset(new DateTime(2024, 8, 8, 16, 23, 11, 869, DateTimeKind.Unspecified).AddTicks(4929), new TimeSpan(0, 3, 0, 0, 0)),
                            ReportFile = new byte[0],
                            StartDate = new DateTimeOffset(new DateTime(2024, 1, 16, 13, 5, 8, 106, DateTimeKind.Unspecified).AddTicks(9073), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            ClassId = 2,
                            EmployeeId = 16,
                            EndDate = new DateTimeOffset(new DateTime(2024, 6, 7, 3, 8, 2, 342, DateTimeKind.Unspecified).AddTicks(120), new TimeSpan(0, 3, 0, 0, 0)),
                            EvaluationFinishedDate = new DateTimeOffset(new DateTime(2024, 9, 26, 12, 15, 58, 628, DateTimeKind.Unspecified).AddTicks(1188), new TimeSpan(0, 3, 0, 0, 0)),
                            ReportFile = new byte[0],
                            StartDate = new DateTimeOffset(new DateTime(2024, 11, 7, 2, 20, 13, 395, DateTimeKind.Unspecified).AddTicks(3505), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            ClassId = 3,
                            EmployeeId = 5,
                            EndDate = new DateTimeOffset(new DateTime(2024, 8, 6, 0, 29, 29, 771, DateTimeKind.Unspecified).AddTicks(5999), new TimeSpan(0, 3, 0, 0, 0)),
                            EvaluationFinishedDate = new DateTimeOffset(new DateTime(2024, 2, 20, 18, 11, 44, 472, DateTimeKind.Unspecified).AddTicks(9627), new TimeSpan(0, 2, 0, 0, 0)),
                            ReportFile = new byte[0],
                            StartDate = new DateTimeOffset(new DateTime(2023, 12, 23, 5, 28, 9, 706, DateTimeKind.Unspecified).AddTicks(7565), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            ClassId = 3,
                            EmployeeId = 19,
                            EndDate = new DateTimeOffset(new DateTime(2025, 4, 1, 20, 10, 12, 441, DateTimeKind.Unspecified).AddTicks(530), new TimeSpan(0, 3, 0, 0, 0)),
                            EvaluationFinishedDate = new DateTimeOffset(new DateTime(2023, 12, 15, 3, 21, 11, 663, DateTimeKind.Unspecified).AddTicks(3468), new TimeSpan(0, 2, 0, 0, 0)),
                            ReportFile = new byte[0],
                            StartDate = new DateTimeOffset(new DateTime(2023, 5, 21, 0, 54, 13, 859, DateTimeKind.Unspecified).AddTicks(4695), new TimeSpan(0, 3, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.KPIMetric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("KPIMetrics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Code Quality"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Development Speed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Team Collaboration"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bug Detection"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Documentation Quality"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Process Improvement"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Time Management"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Initiative"
                        });
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "View employees; View teams; View own recommendations; View own evaluations & reports;",
                            Name = "base"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Manage roles and assign permissions",
                            Name = "manage_roles"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Manage KPI metrics and assign to roles",
                            Name = "manage_kpis"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Manage employee profiles",
                            Name = "manage_employees"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Manage teams",
                            Name = "manage_teams"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Manage evaluation sessions",
                            Name = "manage_evaluations"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Create recommendations based on evaluation sessions",
                            Name = "create_recommendations"
                        },
                        new
                        {
                            Id = 8,
                            Description = "View all evaluations",
                            Name = "view_all_evaluations"
                        },
                        new
                        {
                            Id = 9,
                            Description = "View evaluations of employees from the team",
                            Name = "view_team_evaluations"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Evaluate employees from the team based on role metrics",
                            Name = "evaluate_team_members"
                        });
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("RecommendationText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Recommendations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 7, 0, 29, 30, 885, DateTimeKind.Unspecified).AddTicks(1456), new TimeSpan(0, 2, 0, 0, 0)),
                            EmployeeId = 8,
                            RecommendationText = "Illum veritatis nam. Non rerum molestiae. Porro id quidem ad repellendus qui beatae unde ad aut. Expedita amet blanditiis tempora. Dicta et doloribus sed totam. Eaque suscipit esse harum."
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 30, 20, 26, 52, 10, DateTimeKind.Unspecified).AddTicks(9684), new TimeSpan(0, 3, 0, 0, 0)),
                            EmployeeId = 20,
                            RecommendationText = "Et nesciunt ullam qui quis. Laudantium sed cumque a sint ducimus. Dolores quia nesciunt officiis commodi quo ea asperiores. A modi sint similique similique corporis vero. Eos dicta qui doloribus. Quasi ex animi dolorem nulla quo."
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 6, 30, 10, 3, 57, 325, DateTimeKind.Unspecified).AddTicks(2542), new TimeSpan(0, 3, 0, 0, 0)),
                            EmployeeId = 19,
                            RecommendationText = "Sit et ut non quaerat. Repudiandae sequi animi nostrum sit sed beatae quasi porro. Neque quaerat perspiciatis explicabo eum et expedita facilis illo."
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 4, 9, 4, 49, 97, DateTimeKind.Unspecified).AddTicks(3169), new TimeSpan(0, 2, 0, 0, 0)),
                            EmployeeId = 6,
                            RecommendationText = "Cupiditate accusantium soluta molestiae recusandae dolores quasi nam sunt animi. Hic recusandae voluptatibus cumque rem et. Provident qui aperiam cum impedit."
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 7, 22, 21, 24, 16, 843, DateTimeKind.Unspecified).AddTicks(2300), new TimeSpan(0, 3, 0, 0, 0)),
                            EmployeeId = 19,
                            RecommendationText = "Voluptas quaerat nesciunt blanditiis. Porro neque beatae voluptatem laboriosam minima. Sunt facilis voluptatem architecto. Voluptatem ratione eveniet aut a ipsum amet occaecati."
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 8, 23, 34, 50, 782, DateTimeKind.Unspecified).AddTicks(1754), new TimeSpan(0, 2, 0, 0, 0)),
                            EmployeeId = 15,
                            RecommendationText = "Voluptatem nemo maiores voluptatum nisi incidunt ea recusandae ratione. Incidunt assumenda et iusto magni officia eos a consequatur aut. Ab modi quibusdam natus ad aut dicta. Recusandae maxime aut sed incidunt earum aperiam exercitationem nam incidunt. Maxime qui excepturi labore repudiandae magni. Cupiditate eaque animi eum dolor itaque architecto dolore enim dicta."
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 12, 10, 30, 45, 173, DateTimeKind.Unspecified).AddTicks(5704), new TimeSpan(0, 2, 0, 0, 0)),
                            EmployeeId = 19,
                            RecommendationText = "Voluptatem sapiente non neque quaerat. Cum quos aspernatur nostrum rem est qui. Praesentium sed maiores aut."
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 3, 3, 55, 53, 544, DateTimeKind.Unspecified).AddTicks(806), new TimeSpan(0, 3, 0, 0, 0)),
                            EmployeeId = 7,
                            RecommendationText = "Consequatur omnis delectus. Consequuntur maiores tempore. Odit placeat dolorem veritatis molestiae dolor corporis architecto expedita error. Doloremque itaque nemo voluptates illo."
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 12, 4, 47, 26, 783, DateTimeKind.Unspecified).AddTicks(7210), new TimeSpan(0, 2, 0, 0, 0)),
                            EmployeeId = 19,
                            RecommendationText = "Aut nemo atque voluptas doloribus ut mollitia distinctio. Eius iusto eligendi qui. Amet est natus sit. Veniam ut voluptates modi et consequatur voluptas aut. Rerum voluptates dolores. Velit itaque nulla quibusdam."
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 17, 12, 11, 59, 381, DateTimeKind.Unspecified).AddTicks(9358), new TimeSpan(0, 3, 0, 0, 0)),
                            EmployeeId = 9,
                            RecommendationText = "Qui facilis officiis iusto. Id non repellendus quia. Dolores non modi quas."
                        });
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Unassigned"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Developer"
                        },
                        new
                        {
                            Id = 4,
                            RoleName = "QA Engineer"
                        },
                        new
                        {
                            Id = 5,
                            RoleName = "HR"
                        },
                        new
                        {
                            Id = 6,
                            RoleName = "Team Lead Developer"
                        });
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.RoleKPI", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("KpiId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAllowedToEvaluateExceptLead")
                        .HasColumnType("bit");

                    b.Property<int>("MaxScore")
                        .HasColumnType("int");

                    b.Property<int>("MinScore")
                        .HasColumnType("int");

                    b.Property<string>("ScoreRangeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("RoleId", "KpiId");

                    b.HasIndex("KpiId");

                    b.ToTable("RoleKPIs", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 5,
                            KpiId = 8,
                            IsAllowedToEvaluateExceptLead = false,
                            MaxScore = 10,
                            MinScore = 1,
                            ScoreRangeDescription = "Et quia expedita culpa doloribus enim occaecati.",
                            Weight = 13.590571618913945m
                        },
                        new
                        {
                            RoleId = 6,
                            KpiId = 6,
                            IsAllowedToEvaluateExceptLead = false,
                            MaxScore = 10,
                            MinScore = 1,
                            ScoreRangeDescription = "Id facilis ipsam autem molestias soluta atque unde.",
                            Weight = 8.129058325723310m
                        },
                        new
                        {
                            RoleId = 2,
                            KpiId = 2,
                            IsAllowedToEvaluateExceptLead = true,
                            MaxScore = 10,
                            MinScore = 1,
                            ScoreRangeDescription = "Ex cupiditate rerum.",
                            Weight = 13.552592286631745m
                        },
                        new
                        {
                            RoleId = 6,
                            KpiId = 3,
                            IsAllowedToEvaluateExceptLead = false,
                            MaxScore = 10,
                            MinScore = 1,
                            ScoreRangeDescription = "Ex ipsam nihil placeat in.",
                            Weight = 13.12302815174825m
                        },
                        new
                        {
                            RoleId = 3,
                            KpiId = 2,
                            IsAllowedToEvaluateExceptLead = true,
                            MaxScore = 10,
                            MinScore = 1,
                            ScoreRangeDescription = "Dolorum ea aut voluptatem adipisci illum.",
                            Weight = 9.679784208852695m
                        },
                        new
                        {
                            RoleId = 2,
                            KpiId = 5,
                            IsAllowedToEvaluateExceptLead = false,
                            MaxScore = 10,
                            MinScore = 1,
                            ScoreRangeDescription = "Natus voluptatum dolorem non voluptatem odio maiores minus iste.",
                            Weight = 13.944549965180720m
                        },
                        new
                        {
                            RoleId = 2,
                            KpiId = 3,
                            IsAllowedToEvaluateExceptLead = false,
                            MaxScore = 10,
                            MinScore = 1,
                            ScoreRangeDescription = "Quasi maxime minima natus alias.",
                            Weight = 15.897357608609540m
                        },
                        new
                        {
                            RoleId = 6,
                            KpiId = 2,
                            IsAllowedToEvaluateExceptLead = false,
                            MaxScore = 10,
                            MinScore = 1,
                            ScoreRangeDescription = "Quo ipsa suscipit voluptas magni nobis et rerum nisi et.",
                            Weight = 6.984373066567055m
                        },
                        new
                        {
                            RoleId = 5,
                            KpiId = 7,
                            IsAllowedToEvaluateExceptLead = true,
                            MaxScore = 10,
                            MinScore = 1,
                            ScoreRangeDescription = "Tenetur voluptatem culpa provident.",
                            Weight = 8.867401994703065m
                        });
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.RolePermission", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            PermissionId = 1,
                            RoleId = 6
                        },
                        new
                        {
                            PermissionId = 9,
                            RoleId = 6
                        },
                        new
                        {
                            PermissionId = 10,
                            RoleId = 6
                        },
                        new
                        {
                            PermissionId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            PermissionId = 10,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TeamLeadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamLeadId");

                    b.ToTable("Teams", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Kids, Home & Jewelery"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Movies & Computers"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Shoes & Sports"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Clothing, Tools & Shoes"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Toys, Books & Outdoors"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Electronics & Baby"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Shoes"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Sports, Grocery & Electronics"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Movies & Games"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Music & Clothing"
                        });
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Duane73@gmail.com",
                            PasswordHash = "XfH4m5YrDE",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 2,
                            Email = "Jed.Feest@yahoo.com",
                            PasswordHash = "HWTX_X3dlA",
                            RoleId = 4
                        },
                        new
                        {
                            Id = 3,
                            Email = "Freddie40@hotmail.com",
                            PasswordHash = "vpY_ms7tWv",
                            RoleId = 4
                        },
                        new
                        {
                            Id = 4,
                            Email = "Candace.Bergstrom54@yahoo.com",
                            PasswordHash = "j8PKSWiTJP",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 5,
                            Email = "Kolby_Watsica73@hotmail.com",
                            PasswordHash = "Mm6lJmRNZI",
                            RoleId = 4
                        },
                        new
                        {
                            Id = 6,
                            Email = "Rickey13@gmail.com",
                            PasswordHash = "o7A0Nu4gxA",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 7,
                            Email = "Nash_McGlynn3@gmail.com",
                            PasswordHash = "qqoGW464LU",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 8,
                            Email = "Ebba_Hane@yahoo.com",
                            PasswordHash = "eVd0B1sW2S",
                            RoleId = 6
                        },
                        new
                        {
                            Id = 9,
                            Email = "Crystel.Doyle@gmail.com",
                            PasswordHash = "Mknbz_di0k",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            Email = "Ursula45@yahoo.com",
                            PasswordHash = "nj6bCt_Q0A",
                            RoleId = 6
                        },
                        new
                        {
                            Id = 11,
                            Email = "Una30@hotmail.com",
                            PasswordHash = "xg5GckwXyg",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 12,
                            Email = "John92@hotmail.com",
                            PasswordHash = "HllTG3oIjc",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 13,
                            Email = "Jeffry_Conroy58@yahoo.com",
                            PasswordHash = "rQ5XuIGwCP",
                            RoleId = 6
                        },
                        new
                        {
                            Id = 14,
                            Email = "Uriah99@gmail.com",
                            PasswordHash = "OzNlAzCGGx",
                            RoleId = 6
                        },
                        new
                        {
                            Id = 15,
                            Email = "Roman.Douglas@hotmail.com",
                            PasswordHash = "ncr9ihuOoO",
                            RoleId = 4
                        },
                        new
                        {
                            Id = 16,
                            Email = "Javier57@hotmail.com",
                            PasswordHash = "SzgGPJCfUg",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 17,
                            Email = "Delaney_Jacobson@gmail.com",
                            PasswordHash = "ssdBWI3BxJ",
                            RoleId = 5
                        },
                        new
                        {
                            Id = 18,
                            Email = "Fae1@gmail.com",
                            PasswordHash = "BmfRgf_DGb",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 19,
                            Email = "Sean_Prohaska@hotmail.com",
                            PasswordHash = "LvmspJV9iT",
                            RoleId = 4
                        },
                        new
                        {
                            Id = 20,
                            Email = "Wendy.Beer82@gmail.com",
                            PasswordHash = "bAXBISDImn",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.Employee", b =>
                {
                    b.HasOne("Employee.Performance.Evaluator.Core.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Employee.Performance.Evaluator.Core.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("Employee.Performance.Evaluator.Core.Entities.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.Evaluation", b =>
                {
                    b.HasOne("Employee.Performance.Evaluator.Core.Entities.EvaluationSession", "EvaluationSession")
                        .WithMany("Evaluations")
                        .HasForeignKey("EvaluationSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employee.Performance.Evaluator.Core.Entities.Employee", "Evaluator")
                        .WithMany()
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Employee.Performance.Evaluator.Core.Entities.RoleKPI", "RoleKpi")
                        .WithMany()
                        .HasForeignKey("RoleId", "KpiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EvaluationSession");

                    b.Navigation("Evaluator");

                    b.Navigation("RoleKpi");
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.EvaluationSession", b =>
                {
                    b.HasOne("Employee.Performance.Evaluator.Core.Entities.EmployeeClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Employee.Performance.Evaluator.Core.Entities.Employee", "Employee")
                        .WithMany("EvaluationSessions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.Recommendation", b =>
                {
                    b.HasOne("Employee.Performance.Evaluator.Core.Entities.Employee", null)
                        .WithMany("Recommendations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.RoleKPI", b =>
                {
                    b.HasOne("Employee.Performance.Evaluator.Core.Entities.KPIMetric", "KpiMetric")
                        .WithMany()
                        .HasForeignKey("KpiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employee.Performance.Evaluator.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KpiMetric");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.RolePermission", b =>
                {
                    b.HasOne("Employee.Performance.Evaluator.Core.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employee.Performance.Evaluator.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.Team", b =>
                {
                    b.HasOne("Employee.Performance.Evaluator.Core.Entities.Employee", "TeamLead")
                        .WithMany()
                        .HasForeignKey("TeamLeadId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("TeamLead");
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.User", b =>
                {
                    b.HasOne("Employee.Performance.Evaluator.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.Employee", b =>
                {
                    b.Navigation("EvaluationSessions");

                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("Employee.Performance.Evaluator.Core.Entities.EvaluationSession", b =>
                {
                    b.Navigation("Evaluations");
                });
#pragma warning restore 612, 618
        }
    }
}
